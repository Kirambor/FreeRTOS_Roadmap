
Intro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004040  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004150  08004150  00005150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f4  080041f4  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  080041f4  080041f4  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041f4  080041f4  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f4  080041f4  000051f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041f8  080041f8  000051f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080041fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a4  20000060  0800425c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001204  0800425c  00006204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f942  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029dd  00000000  00000000  000159cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000183a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7f  00000000  00000000  000192a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001862e  00000000  00000000  00019e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e19  00000000  00000000  0003244d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de3c  00000000  00000000  00043266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d10a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  000d10e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d5128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004138 	.word	0x08004138

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004138 	.word	0x08004138

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b098      	sub	sp, #96	@ 0x60
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa45 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f859 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f899 	bl	80002c4 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySem */
  osSemaphoreDef(binarySem);
 8000192:	2300      	movs	r3, #0
 8000194:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000196:	2300      	movs	r3, #0
 8000198:	65fb      	str	r3, [r7, #92]	@ 0x5c
  binarySemHandle = osSemaphoreCreate(osSemaphore(binarySem), 1);
 800019a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800019e:	2101      	movs	r1, #1
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 fbd2 	bl	800194a <osSemaphoreCreate>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000224 <main+0xa4>)
 80001aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, DefaultTask, osPriorityNormal, 0, 128);
 80001ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000228 <main+0xa8>)
 80001ae:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001b2:	461d      	mov	r5, r3
 80001b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fb5f 	bl	800188a <osThreadCreate>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4a17      	ldr	r2, [pc, #92]	@ (800022c <main+0xac>)
 80001d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledOn */
  osThreadDef(ledOn, LedOn, osPriorityNormal, 0, 128);
 80001d2:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <main+0xb0>)
 80001d4:	f107 0420 	add.w	r4, r7, #32
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledOnHandle = osThreadCreate(osThread(ledOn), NULL);
 80001e6:	f107 0320 	add.w	r3, r7, #32
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 fb4c 	bl	800188a <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000234 <main+0xb4>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledOff */
  osThreadDef(ledOff, LedOff, osPriorityNormal, 0, 128);
 80001f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <main+0xb8>)
 80001fa:	1d3c      	adds	r4, r7, #4
 80001fc:	461d      	mov	r5, r3
 80001fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000202:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledOffHandle = osThreadCreate(osThread(ledOff), NULL);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fb3b 	bl	800188a <osThreadCreate>
 8000214:	4603      	mov	r3, r0
 8000216:	4a09      	ldr	r2, [pc, #36]	@ (800023c <main+0xbc>)
 8000218:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800021a:	f001 fb2f 	bl	800187c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021e:	bf00      	nop
 8000220:	e7fd      	b.n	800021e <main+0x9e>
 8000222:	bf00      	nop
 8000224:	20000328 	.word	0x20000328
 8000228:	0800415c 	.word	0x0800415c
 800022c:	2000031c 	.word	0x2000031c
 8000230:	08004180 	.word	0x08004180
 8000234:	20000320 	.word	0x20000320
 8000238:	080041a4 	.word	0x080041a4
 800023c:	20000324 	.word	0x20000324

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	@ 0x40
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	@ 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f003 fe8c 	bl	8003f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000262:	2302      	movs	r3, #2
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026a:	2310      	movs	r3, #16
 800026c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000272:	2300      	movs	r3, #0
 8000274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000276:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800027a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0318 	add.w	r3, r7, #24
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fc6d 	bl	8000b60 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800028c:	f000 f8b6 	bl	80003fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2302      	movs	r3, #2
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 feda 	bl	8001064 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002b6:	f000 f8a1 	bl	80003fc <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	@ 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0308 	add.w	r3, r7, #8
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <MX_GPIO_Init+0x8c>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000350 <MX_GPIO_Init+0x8c>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_GPIO_Init+0x8c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_GPIO_Init+0x8c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a16      	ldr	r2, [pc, #88]	@ (8000350 <MX_GPIO_Init+0x8c>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_GPIO_Init+0x8c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	603b      	str	r3, [r7, #0]
 8000306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4811      	ldr	r0, [pc, #68]	@ (8000354 <MX_GPIO_Init+0x90>)
 800030e:	f000 fc0f 	bl	8000b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_KE_Pin */
  GPIO_InitStruct.Pin = User_KE_Pin;
 8000312:	2301      	movs	r3, #1
 8000314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(User_KE_GPIO_Port, &GPIO_InitStruct);
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	4619      	mov	r1, r3
 8000324:	480c      	ldr	r0, [pc, #48]	@ (8000358 <MX_GPIO_Init+0x94>)
 8000326:	f000 fa87 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Status_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 800032a:	2304      	movs	r3, #4
 800032c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	4619      	mov	r1, r3
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <MX_GPIO_Init+0x90>)
 8000342:	f000 fa79 	bl	8000838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000346:	bf00      	nop
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40010c00 	.word	0x40010c00
 8000358:	40010800 	.word	0x40010800

0800035c <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void const * argument)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000368:	f001 fadb 	bl	8001922 <osDelay>
 800036c:	e7fa      	b.n	8000364 <DefaultTask+0x8>
	...

08000370 <LedOn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedOn */
void LedOn(void const * argument)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedOn */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(binarySemHandle, osWaitForever) == osOK)
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <LedOn+0x30>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f04f 31ff 	mov.w	r1, #4294967295
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fb15 	bl	80019b0 <osSemaphoreWait>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f5      	bne.n	8000378 <LedOn+0x8>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2104      	movs	r1, #4
 8000390:	4804      	ldr	r0, [pc, #16]	@ (80003a4 <LedOn+0x34>)
 8000392:	f000 fbcd 	bl	8000b30 <HAL_GPIO_WritePin>
		  osDelay(500);
 8000396:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800039a:	f001 fac2 	bl	8001922 <osDelay>
	  if (osSemaphoreWait(binarySemHandle, osWaitForever) == osOK)
 800039e:	e7eb      	b.n	8000378 <LedOn+0x8>
 80003a0:	20000328 	.word	0x20000328
 80003a4:	40010c00 	.word	0x40010c00

080003a8 <LedOff>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedOff */
void LedOff(void const * argument)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedOff */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2104      	movs	r1, #4
 80003b4:	4806      	ldr	r0, [pc, #24]	@ (80003d0 <LedOff+0x28>)
 80003b6:	f000 fbbb 	bl	8000b30 <HAL_GPIO_WritePin>
	  osSemaphoreRelease(binarySemHandle);
 80003ba:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <LedOff+0x2c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fb44 	bl	8001a4c <osSemaphoreRelease>
	  osDelay(500);
 80003c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003c8:	f001 faab 	bl	8001922 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80003cc:	bf00      	nop
 80003ce:	e7ef      	b.n	80003b0 <LedOff+0x8>
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	20000328 	.word	0x20000328

080003d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a04      	ldr	r2, [pc, #16]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d101      	bne.n	80003ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ea:	f000 f929 	bl	8000640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40000400 	.word	0x40000400

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000400:	b672      	cpsid	i
}
 8000402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <Error_Handler+0x8>

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040e:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <HAL_MspInit+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a17      	ldr	r2, [pc, #92]	@ (8000470 <HAL_MspInit+0x68>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <HAL_MspInit+0x68>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <HAL_MspInit+0x68>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	4a11      	ldr	r2, [pc, #68]	@ (8000470 <HAL_MspInit+0x68>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000430:	61d3      	str	r3, [r2, #28]
 8000432:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <HAL_MspInit+0x68>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	210f      	movs	r1, #15
 8000442:	f06f 0001 	mvn.w	r0, #1
 8000446:	f000 f9cc 	bl	80007e2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044a:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <HAL_MspInit+0x6c>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <HAL_MspInit+0x6c>)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	40010000 	.word	0x40010000

08000478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	@ 0x38
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000480:	2300      	movs	r3, #0
 8000482:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000484:	2300      	movs	r3, #0
 8000486:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000488:	2300      	movs	r3, #0
 800048a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800048e:	4b34      	ldr	r3, [pc, #208]	@ (8000560 <HAL_InitTick+0xe8>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a33      	ldr	r2, [pc, #204]	@ (8000560 <HAL_InitTick+0xe8>)
 8000494:	f043 0302 	orr.w	r3, r3, #2
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b31      	ldr	r3, [pc, #196]	@ (8000560 <HAL_InitTick+0xe8>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a6:	f107 0210 	add.w	r2, r7, #16
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 ff33 	bl	800131c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004b6:	6a3b      	ldr	r3, [r7, #32]
 80004b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d103      	bne.n	80004c8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004c0:	f000 ff18 	bl	80012f4 <HAL_RCC_GetPCLK1Freq>
 80004c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80004c6:	e004      	b.n	80004d2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004c8:	f000 ff14 	bl	80012f4 <HAL_RCC_GetPCLK1Freq>
 80004cc:	4603      	mov	r3, r0
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004d4:	4a23      	ldr	r2, [pc, #140]	@ (8000564 <HAL_InitTick+0xec>)
 80004d6:	fba2 2303 	umull	r2, r3, r2, r3
 80004da:	0c9b      	lsrs	r3, r3, #18
 80004dc:	3b01      	subs	r3, #1
 80004de:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80004e0:	4b21      	ldr	r3, [pc, #132]	@ (8000568 <HAL_InitTick+0xf0>)
 80004e2:	4a22      	ldr	r2, [pc, #136]	@ (800056c <HAL_InitTick+0xf4>)
 80004e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80004e6:	4b20      	ldr	r3, [pc, #128]	@ (8000568 <HAL_InitTick+0xf0>)
 80004e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004ec:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80004ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000568 <HAL_InitTick+0xf0>)
 80004f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004f2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <HAL_InitTick+0xf0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <HAL_InitTick+0xf0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000500:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <HAL_InitTick+0xf0>)
 8000502:	2200      	movs	r2, #0
 8000504:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000506:	4818      	ldr	r0, [pc, #96]	@ (8000568 <HAL_InitTick+0xf0>)
 8000508:	f000 ff56 	bl	80013b8 <HAL_TIM_Base_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000512:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000516:	2b00      	cmp	r3, #0
 8000518:	d11b      	bne.n	8000552 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800051a:	4813      	ldr	r0, [pc, #76]	@ (8000568 <HAL_InitTick+0xf0>)
 800051c:	f000 ffa4 	bl	8001468 <HAL_TIM_Base_Start_IT>
 8000520:	4603      	mov	r3, r0
 8000522:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000526:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800052a:	2b00      	cmp	r3, #0
 800052c:	d111      	bne.n	8000552 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800052e:	201d      	movs	r0, #29
 8000530:	f000 f973 	bl	800081a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b0f      	cmp	r3, #15
 8000538:	d808      	bhi.n	800054c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800053a:	2200      	movs	r2, #0
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	201d      	movs	r0, #29
 8000540:	f000 f94f 	bl	80007e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000544:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <HAL_InitTick+0xf8>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	e002      	b.n	8000552 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000552:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000556:	4618      	mov	r0, r3
 8000558:	3738      	adds	r7, #56	@ 0x38
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	431bde83 	.word	0x431bde83
 8000568:	2000032c 	.word	0x2000032c
 800056c:	40000400 	.word	0x40000400
 8000570:	20000004 	.word	0x20000004

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <NMI_Handler+0x4>

0800057c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <MemManage_Handler+0x4>

0800058c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <BusFault_Handler+0x4>

08000594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <UsageFault_Handler+0x4>

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <TIM3_IRQHandler+0x10>)
 80005ae:	f000 ffa7 	bl	8001500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000032c 	.word	0x2000032c

080005bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c8:	f7ff fff8 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ce:	490c      	ldr	r1, [pc, #48]	@ (8000600 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a09      	ldr	r2, [pc, #36]	@ (8000608 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005e4:	4c09      	ldr	r4, [pc, #36]	@ (800060c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f2:	f003 fd19 	bl	8004028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fdc3 	bl	8000180 <main>
  bx lr
 80005fa:	4770      	bx	lr
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000604:	080041fc 	.word	0x080041fc
  ldr r2, =_sbss
 8000608:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800060c:	20001204 	.word	0x20001204

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	@ (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f8d1 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	200f      	movs	r0, #15
 800062c:	f7ff ff24 	bl	8000478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff feea 	bl	8000408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_IncTick+0x1c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_IncTick+0x20>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a03      	ldr	r2, [pc, #12]	@ (8000660 <HAL_IncTick+0x20>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000008 	.word	0x20000008
 8000660:	20000374 	.word	0x20000374

08000664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b02      	ldr	r3, [pc, #8]	@ (8000674 <HAL_GetTick+0x10>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	20000374 	.word	0x20000374

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db0b      	blt.n	8000706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 021f 	and.w	r2, r3, #31
 80006f4:	4906      	ldr	r1, [pc, #24]	@ (8000710 <__NVIC_EnableIRQ+0x34>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	2001      	movs	r0, #1
 80006fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	@ (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	@ (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	@ 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	@ 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff4f 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff64 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ffb2 	bl	8000768 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff81 	bl	8000714 <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff57 	bl	80006dc <__NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b08b      	sub	sp, #44	@ 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084a:	e161      	b.n	8000b10 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800084c:	2201      	movs	r2, #1
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 8150 	bne.w	8000b0a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	4a97      	ldr	r2, [pc, #604]	@ (8000acc <HAL_GPIO_Init+0x294>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d05e      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000874:	4a95      	ldr	r2, [pc, #596]	@ (8000acc <HAL_GPIO_Init+0x294>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d875      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 800087a:	4a95      	ldr	r2, [pc, #596]	@ (8000ad0 <HAL_GPIO_Init+0x298>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d058      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000880:	4a93      	ldr	r2, [pc, #588]	@ (8000ad0 <HAL_GPIO_Init+0x298>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d86f      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 8000886:	4a93      	ldr	r2, [pc, #588]	@ (8000ad4 <HAL_GPIO_Init+0x29c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d052      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 800088c:	4a91      	ldr	r2, [pc, #580]	@ (8000ad4 <HAL_GPIO_Init+0x29c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d869      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 8000892:	4a91      	ldr	r2, [pc, #580]	@ (8000ad8 <HAL_GPIO_Init+0x2a0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d04c      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000898:	4a8f      	ldr	r2, [pc, #572]	@ (8000ad8 <HAL_GPIO_Init+0x2a0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d863      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 800089e:	4a8f      	ldr	r2, [pc, #572]	@ (8000adc <HAL_GPIO_Init+0x2a4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d046      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 80008a4:	4a8d      	ldr	r2, [pc, #564]	@ (8000adc <HAL_GPIO_Init+0x2a4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d85d      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d82a      	bhi.n	8000904 <HAL_GPIO_Init+0xcc>
 80008ae:	2b12      	cmp	r3, #18
 80008b0:	d859      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 80008b2:	a201      	add	r2, pc, #4	@ (adr r2, 80008b8 <HAL_GPIO_Init+0x80>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	08000933 	.word	0x08000933
 80008bc:	0800090d 	.word	0x0800090d
 80008c0:	0800091f 	.word	0x0800091f
 80008c4:	08000961 	.word	0x08000961
 80008c8:	08000967 	.word	0x08000967
 80008cc:	08000967 	.word	0x08000967
 80008d0:	08000967 	.word	0x08000967
 80008d4:	08000967 	.word	0x08000967
 80008d8:	08000967 	.word	0x08000967
 80008dc:	08000967 	.word	0x08000967
 80008e0:	08000967 	.word	0x08000967
 80008e4:	08000967 	.word	0x08000967
 80008e8:	08000967 	.word	0x08000967
 80008ec:	08000967 	.word	0x08000967
 80008f0:	08000967 	.word	0x08000967
 80008f4:	08000967 	.word	0x08000967
 80008f8:	08000967 	.word	0x08000967
 80008fc:	08000915 	.word	0x08000915
 8000900:	08000929 	.word	0x08000929
 8000904:	4a76      	ldr	r2, [pc, #472]	@ (8000ae0 <HAL_GPIO_Init+0x2a8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d013      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800090a:	e02c      	b.n	8000966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	623b      	str	r3, [r7, #32]
          break;
 8000912:	e029      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	3304      	adds	r3, #4
 800091a:	623b      	str	r3, [r7, #32]
          break;
 800091c:	e024      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	3308      	adds	r3, #8
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e01f      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	330c      	adds	r3, #12
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e01a      	b.n	8000968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800093a:	2304      	movs	r3, #4
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e013      	b.n	8000968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d105      	bne.n	8000954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000948:	2308      	movs	r3, #8
 800094a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	611a      	str	r2, [r3, #16]
          break;
 8000952:	e009      	b.n	8000968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000954:	2308      	movs	r3, #8
 8000956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	615a      	str	r2, [r3, #20]
          break;
 800095e:	e003      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e000      	b.n	8000968 <HAL_GPIO_Init+0x130>
          break;
 8000966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2bff      	cmp	r3, #255	@ 0xff
 800096c:	d801      	bhi.n	8000972 <HAL_GPIO_Init+0x13a>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	e001      	b.n	8000976 <HAL_GPIO_Init+0x13e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3304      	adds	r3, #4
 8000976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	2bff      	cmp	r3, #255	@ 0xff
 800097c:	d802      	bhi.n	8000984 <HAL_GPIO_Init+0x14c>
 800097e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	e002      	b.n	800098a <HAL_GPIO_Init+0x152>
 8000984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000986:	3b08      	subs	r3, #8
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	210f      	movs	r1, #15
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	6a39      	ldr	r1, [r7, #32]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	431a      	orrs	r2, r3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 80a9 	beq.w	8000b0a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae4 <HAL_GPIO_Init+0x2ac>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a49      	ldr	r2, [pc, #292]	@ (8000ae4 <HAL_GPIO_Init+0x2ac>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b47      	ldr	r3, [pc, #284]	@ (8000ae4 <HAL_GPIO_Init+0x2ac>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009d0:	4a45      	ldr	r2, [pc, #276]	@ (8000ae8 <HAL_GPIO_Init+0x2b0>)
 80009d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3d      	ldr	r2, [pc, #244]	@ (8000aec <HAL_GPIO_Init+0x2b4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00d      	beq.n	8000a18 <HAL_GPIO_Init+0x1e0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a3c      	ldr	r2, [pc, #240]	@ (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x1dc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a3b      	ldr	r2, [pc, #236]	@ (8000af4 <HAL_GPIO_Init+0x2bc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <HAL_GPIO_Init+0x1d8>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e004      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a10:	2303      	movs	r3, #3
 8000a12:	e002      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a1c:	f002 0203 	and.w	r2, r2, #3
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a2a:	492f      	ldr	r1, [pc, #188]	@ (8000ae8 <HAL_GPIO_Init+0x2b0>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	492b      	ldr	r1, [pc, #172]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a52:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	4927      	ldr	r1, [pc, #156]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	4921      	ldr	r1, [pc, #132]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60cb      	str	r3, [r1, #12]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a7c:	68da      	ldr	r2, [r3, #12]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	491d      	ldr	r1, [pc, #116]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4917      	ldr	r1, [pc, #92]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	4913      	ldr	r1, [pc, #76]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d01f      	beq.n	8000afc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	600b      	str	r3, [r1, #0]
 8000ac8:	e01f      	b.n	8000b0a <HAL_GPIO_Init+0x2d2>
 8000aca:	bf00      	nop
 8000acc:	10320000 	.word	0x10320000
 8000ad0:	10310000 	.word	0x10310000
 8000ad4:	10220000 	.word	0x10220000
 8000ad8:	10210000 	.word	0x10210000
 8000adc:	10120000 	.word	0x10120000
 8000ae0:	10110000 	.word	0x10110000
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_GPIO_Init+0x2f4>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4909      	ldr	r1, [pc, #36]	@ (8000b2c <HAL_GPIO_Init+0x2f4>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f47f ae96 	bne.w	800084c <HAL_GPIO_Init+0x14>
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	372c      	adds	r7, #44	@ 0x2c
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40010400 	.word	0x40010400

08000b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b4c:	e003      	b.n	8000b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	611a      	str	r2, [r3, #16]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e272      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8087 	beq.w	8000c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b80:	4b92      	ldr	r3, [pc, #584]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d00c      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 030c 	and.w	r3, r3, #12
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d112      	bne.n	8000bbe <HAL_RCC_OscConfig+0x5e>
 8000b98:	4b8c      	ldr	r3, [pc, #560]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ba4:	d10b      	bne.n	8000bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba6:	4b89      	ldr	r3, [pc, #548]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d06c      	beq.n	8000c8c <HAL_RCC_OscConfig+0x12c>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d168      	bne.n	8000c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e24c      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bc6:	d106      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x76>
 8000bc8:	4b80      	ldr	r3, [pc, #512]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a7f      	ldr	r2, [pc, #508]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e02e      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x98>
 8000bde:	4b7b      	ldr	r3, [pc, #492]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a7a      	ldr	r2, [pc, #488]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	4b78      	ldr	r3, [pc, #480]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a77      	ldr	r2, [pc, #476]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	e01d      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c00:	d10c      	bne.n	8000c1c <HAL_RCC_OscConfig+0xbc>
 8000c02:	4b72      	ldr	r3, [pc, #456]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a71      	ldr	r2, [pc, #452]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a6e      	ldr	r2, [pc, #440]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e00b      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a6a      	ldr	r2, [pc, #424]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b68      	ldr	r3, [pc, #416]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a67      	ldr	r2, [pc, #412]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d013      	beq.n	8000c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fd12 	bl	8000664 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fd0e 	bl	8000664 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b64      	cmp	r3, #100	@ 0x64
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e200      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c56:	4b5d      	ldr	r3, [pc, #372]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f0      	beq.n	8000c44 <HAL_RCC_OscConfig+0xe4>
 8000c62:	e014      	b.n	8000c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c64:	f7ff fcfe 	bl	8000664 <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fcfa 	bl	8000664 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b64      	cmp	r3, #100	@ 0x64
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e1ec      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7e:	4b53      	ldr	r3, [pc, #332]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f0      	bne.n	8000c6c <HAL_RCC_OscConfig+0x10c>
 8000c8a:	e000      	b.n	8000c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d063      	beq.n	8000d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00b      	beq.n	8000cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ca6:	4b49      	ldr	r3, [pc, #292]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d11c      	bne.n	8000cec <HAL_RCC_OscConfig+0x18c>
 8000cb2:	4b46      	ldr	r3, [pc, #280]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d116      	bne.n	8000cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbe:	4b43      	ldr	r3, [pc, #268]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x176>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d001      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e1c0      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4939      	ldr	r1, [pc, #228]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cea:	e03a      	b.n	8000d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d020      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf4:	4b36      	ldr	r3, [pc, #216]	@ (8000dd0 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fcb3 	bl	8000664 <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d02:	f7ff fcaf 	bl	8000664 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e1a1      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d14:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f0      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d20:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	4927      	ldr	r1, [pc, #156]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
 8000d34:	e015      	b.n	8000d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <HAL_RCC_OscConfig+0x270>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fc92 	bl	8000664 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d44:	f7ff fc8e 	bl	8000664 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e180      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d56:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d03a      	beq.n	8000de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d019      	beq.n	8000daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <HAL_RCC_OscConfig+0x274>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fc72 	bl	8000664 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc6e 	bl	8000664 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e160      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f0      	beq.n	8000d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 faea 	bl	800137c <RCC_Delay>
 8000da8:	e01c      	b.n	8000de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_RCC_OscConfig+0x274>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc58 	bl	8000664 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db6:	e00f      	b.n	8000dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc54 	bl	8000664 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d908      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e146      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	42420000 	.word	0x42420000
 8000dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd8:	4b92      	ldr	r3, [pc, #584]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e9      	bne.n	8000db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80a6 	beq.w	8000f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df6:	4b8b      	ldr	r3, [pc, #556]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10d      	bne.n	8000e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b88      	ldr	r3, [pc, #544]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a87      	ldr	r2, [pc, #540]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b85      	ldr	r3, [pc, #532]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1e:	4b82      	ldr	r3, [pc, #520]	@ (8001028 <HAL_RCC_OscConfig+0x4c8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d118      	bne.n	8000e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001028 <HAL_RCC_OscConfig+0x4c8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001028 <HAL_RCC_OscConfig+0x4c8>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fc15 	bl	8000664 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e3e:	f7ff fc11 	bl	8000664 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b64      	cmp	r3, #100	@ 0x64
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e103      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e50:	4b75      	ldr	r3, [pc, #468]	@ (8001028 <HAL_RCC_OscConfig+0x4c8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d106      	bne.n	8000e72 <HAL_RCC_OscConfig+0x312>
 8000e64:	4b6f      	ldr	r3, [pc, #444]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4a6e      	ldr	r2, [pc, #440]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6213      	str	r3, [r2, #32]
 8000e70:	e02d      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x334>
 8000e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a69      	ldr	r2, [pc, #420]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	6213      	str	r3, [r2, #32]
 8000e86:	4b67      	ldr	r3, [pc, #412]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a66      	ldr	r2, [pc, #408]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	f023 0304 	bic.w	r3, r3, #4
 8000e90:	6213      	str	r3, [r2, #32]
 8000e92:	e01c      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d10c      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x356>
 8000e9c:	4b61      	ldr	r3, [pc, #388]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a60      	ldr	r2, [pc, #384]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	4a5d      	ldr	r2, [pc, #372]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6213      	str	r3, [r2, #32]
 8000eb4:	e00b      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a5a      	ldr	r2, [pc, #360]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	6213      	str	r3, [r2, #32]
 8000ec2:	4b58      	ldr	r3, [pc, #352]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a57      	ldr	r2, [pc, #348]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d015      	beq.n	8000f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fbc5 	bl	8000664 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f7ff fbc1 	bl	8000664 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e0b1      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0ee      	beq.n	8000ede <HAL_RCC_OscConfig+0x37e>
 8000f00:	e014      	b.n	8000f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fbaf 	bl	8000664 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fbab 	bl	8000664 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e09b      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	4b40      	ldr	r3, [pc, #256]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ee      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d105      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f32:	4b3c      	ldr	r3, [pc, #240]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a3b      	ldr	r2, [pc, #236]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8087 	beq.w	8001056 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f48:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d061      	beq.n	8001018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d146      	bne.n	8000fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	4b33      	ldr	r3, [pc, #204]	@ (800102c <HAL_RCC_OscConfig+0x4cc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb7f 	bl	8000664 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fb7b 	bl	8000664 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e06d      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f7c:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f0      	bne.n	8000f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f90:	d108      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f92:	4b24      	ldr	r3, [pc, #144]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	4921      	ldr	r1, [pc, #132]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a19      	ldr	r1, [r3, #32]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	491b      	ldr	r1, [pc, #108]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <HAL_RCC_OscConfig+0x4cc>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb4f 	bl	8000664 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fb4b 	bl	8000664 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e03d      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <HAL_RCC_OscConfig+0x46a>
 8000fe8:	e035      	b.n	8001056 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <HAL_RCC_OscConfig+0x4cc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fb38 	bl	8000664 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff8:	f7ff fb34 	bl	8000664 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e026      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x498>
 8001016:	e01e      	b.n	8001056 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d107      	bne.n	8001030 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e019      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
 8001024:	40021000 	.word	0x40021000
 8001028:	40007000 	.word	0x40007000
 800102c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_RCC_OscConfig+0x500>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	429a      	cmp	r2, r3
 8001042:	d106      	bne.n	8001052 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104e:	429a      	cmp	r2, r3
 8001050:	d001      	beq.n	8001056 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e0d0      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001078:	4b6a      	ldr	r3, [pc, #424]	@ (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d910      	bls.n	80010a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001086:	4b67      	ldr	r3, [pc, #412]	@ (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 0207 	bic.w	r2, r3, #7
 800108e:	4965      	ldr	r1, [pc, #404]	@ (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001096:	4b63      	ldr	r3, [pc, #396]	@ (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0b8      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c0:	4b59      	ldr	r3, [pc, #356]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a58      	ldr	r2, [pc, #352]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d8:	4b53      	ldr	r3, [pc, #332]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a52      	ldr	r2, [pc, #328]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e4:	4b50      	ldr	r3, [pc, #320]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	494d      	ldr	r1, [pc, #308]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d040      	beq.n	8001184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d107      	bne.n	800111a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b47      	ldr	r3, [pc, #284]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d115      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e07f      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d107      	bne.n	8001132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001122:	4b41      	ldr	r3, [pc, #260]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d109      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e073      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	4b3d      	ldr	r3, [pc, #244]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e06b      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001142:	4b39      	ldr	r3, [pc, #228]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f023 0203 	bic.w	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4936      	ldr	r1, [pc, #216]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001154:	f7ff fa86 	bl	8000664 <HAL_GetTick>
 8001158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115a:	e00a      	b.n	8001172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115c:	f7ff fa82 	bl	8000664 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800116a:	4293      	cmp	r3, r2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e053      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001172:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 020c 	and.w	r2, r3, #12
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	429a      	cmp	r2, r3
 8001182:	d1eb      	bne.n	800115c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d210      	bcs.n	80011b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 0207 	bic.w	r2, r3, #7
 800119a:	4922      	ldr	r1, [pc, #136]	@ (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e032      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4916      	ldr	r1, [pc, #88]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d009      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	490e      	ldr	r1, [pc, #56]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011f2:	f000 f821 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 80011f6:	4602      	mov	r2, r0
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	490a      	ldr	r1, [pc, #40]	@ (800122c <HAL_RCC_ClockConfig+0x1c8>)
 8001204:	5ccb      	ldrb	r3, [r1, r3]
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	4a09      	ldr	r2, [pc, #36]	@ (8001230 <HAL_RCC_ClockConfig+0x1cc>)
 800120c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_RCC_ClockConfig+0x1d0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f930 	bl	8000478 <HAL_InitTick>

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000
 8001228:	40021000 	.word	0x40021000
 800122c:	080041c8 	.word	0x080041c8
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d002      	beq.n	8001268 <HAL_RCC_GetSysClockFreq+0x30>
 8001262:	2b08      	cmp	r3, #8
 8001264:	d003      	beq.n	800126e <HAL_RCC_GetSysClockFreq+0x36>
 8001266:	e027      	b.n	80012b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001268:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800126a:	613b      	str	r3, [r7, #16]
      break;
 800126c:	e027      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0c9b      	lsrs	r3, r3, #18
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	4a17      	ldr	r2, [pc, #92]	@ (80012d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d010      	beq.n	80012a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	0c5b      	lsrs	r3, r3, #17
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800129a:	fb03 f202 	mul.w	r2, r3, r2
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e004      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a0c      	ldr	r2, [pc, #48]	@ (80012dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	613b      	str	r3, [r7, #16]
      break;
 80012b6:	e002      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ba:	613b      	str	r3, [r7, #16]
      break;
 80012bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012be:	693b      	ldr	r3, [r7, #16]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	007a1200 	.word	0x007a1200
 80012d4:	080041e0 	.word	0x080041e0
 80012d8:	080041f0 	.word	0x080041f0
 80012dc:	003d0900 	.word	0x003d0900

080012e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e4:	4b02      	ldr	r3, [pc, #8]	@ (80012f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000000 	.word	0x20000000

080012f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012f8:	f7ff fff2 	bl	80012e0 <HAL_RCC_GetHCLKFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4903      	ldr	r1, [pc, #12]	@ (8001318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	080041d8 	.word	0x080041d8

0800131c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	220f      	movs	r2, #15
 800132a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_RCC_GetClockConfig+0x58>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_RCC_GetClockConfig+0x58>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <HAL_RCC_GetClockConfig+0x58>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <HAL_RCC_GetClockConfig+0x58>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0207 	and.w	r2, r3, #7
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000
 8001378:	40022000 	.word	0x40022000

0800137c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <RCC_Delay+0x34>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <RCC_Delay+0x38>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0a5b      	lsrs	r3, r3, #9
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001398:	bf00      	nop
  }
  while (Delay --);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	60fa      	str	r2, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f9      	bne.n	8001398 <RCC_Delay+0x1c>
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000000 	.word	0x20000000
 80013b4:	10624dd3 	.word	0x10624dd3

080013b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e041      	b.n	800144e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f839 	bl	8001456 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3304      	adds	r3, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f000 f9ae 	bl	8001758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d001      	beq.n	8001480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e035      	b.n	80014ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a16      	ldr	r2, [pc, #88]	@ (80014f8 <HAL_TIM_Base_Start_IT+0x90>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d009      	beq.n	80014b6 <HAL_TIM_Base_Start_IT+0x4e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014aa:	d004      	beq.n	80014b6 <HAL_TIM_Base_Start_IT+0x4e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <HAL_TIM_Base_Start_IT+0x94>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d111      	bne.n	80014da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	d010      	beq.n	80014ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014d8:	e007      	b.n	80014ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0201 	orr.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40012c00 	.word	0x40012c00
 80014fc:	40000400 	.word	0x40000400

08001500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b02      	cmp	r3, #2
 8001514:	d122      	bne.n	800155c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b02      	cmp	r3, #2
 8001522:	d11b      	bne.n	800155c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f06f 0202 	mvn.w	r2, #2
 800152c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f8ed 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 8001548:	e005      	b.n	8001556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f8e0 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8ef 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b04      	cmp	r3, #4
 8001568:	d122      	bne.n	80015b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b04      	cmp	r3, #4
 8001576:	d11b      	bne.n	80015b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0204 	mvn.w	r2, #4
 8001580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2202      	movs	r2, #2
 8001586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f8c3 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 800159c:	e005      	b.n	80015aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8b6 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8c5 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d122      	bne.n	8001604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d11b      	bne.n	8001604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0208 	mvn.w	r2, #8
 80015d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2204      	movs	r2, #4
 80015da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f899 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 80015f0:	e005      	b.n	80015fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f88c 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f89b 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b10      	cmp	r3, #16
 8001610:	d122      	bne.n	8001658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b10      	cmp	r3, #16
 800161e:	d11b      	bne.n	8001658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0210 	mvn.w	r2, #16
 8001628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2208      	movs	r2, #8
 800162e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f86f 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 8001644:	e005      	b.n	8001652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f862 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f871 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	d10e      	bne.n	8001684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0201 	mvn.w	r2, #1
 800167c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7fe feaa 	bl	80003d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168e:	2b80      	cmp	r3, #128	@ 0x80
 8001690:	d10e      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169c:	2b80      	cmp	r3, #128	@ 0x80
 800169e:	d107      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80016a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f8b5 	bl	800181a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ba:	2b40      	cmp	r3, #64	@ 0x40
 80016bc:	d10e      	bne.n	80016dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c8:	2b40      	cmp	r3, #64	@ 0x40
 80016ca:	d107      	bne.n	80016dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80016d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f835 	bl	8001746 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0220 	mvn.w	r2, #32
 8001700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f880 	bl	8001808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a25      	ldr	r2, [pc, #148]	@ (8001800 <TIM_Base_SetConfig+0xa8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d007      	beq.n	8001780 <TIM_Base_SetConfig+0x28>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001776:	d003      	beq.n	8001780 <TIM_Base_SetConfig+0x28>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a22      	ldr	r2, [pc, #136]	@ (8001804 <TIM_Base_SetConfig+0xac>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d108      	bne.n	8001792 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a1a      	ldr	r2, [pc, #104]	@ (8001800 <TIM_Base_SetConfig+0xa8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <TIM_Base_SetConfig+0x52>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a0:	d003      	beq.n	80017aa <TIM_Base_SetConfig+0x52>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <TIM_Base_SetConfig+0xac>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d108      	bne.n	80017bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <TIM_Base_SetConfig+0xa8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d103      	bne.n	80017f0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	615a      	str	r2, [r3, #20]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	40012c00 	.word	0x40012c00
 8001804:	40000400 	.word	0x40000400

08001808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800183a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183e:	2b84      	cmp	r3, #132	@ 0x84
 8001840:	d005      	beq.n	800184e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001842:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	3303      	adds	r3, #3
 800184c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001860:	f3ef 8305 	mrs	r3, IPSR
 8001864:	607b      	str	r3, [r7, #4]
  return(result);
 8001866:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf14      	ite	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2300      	moveq	r3, #0
 8001870:	b2db      	uxtb	r3, r3
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001880:	f001 f936 	bl	8002af0 <vTaskStartScheduler>
  
  return osOK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}

0800188a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800188a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188c:	b089      	sub	sp, #36	@ 0x24
 800188e:	af04      	add	r7, sp, #16
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <osThreadCreate+0x54>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685c      	ldr	r4, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691e      	ldr	r6, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ffb8 	bl	800182c <makeFreeRtosPriority>
 80018bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018c6:	9202      	str	r2, [sp, #8]
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	9100      	str	r1, [sp, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4632      	mov	r2, r6
 80018d0:	4629      	mov	r1, r5
 80018d2:	4620      	mov	r0, r4
 80018d4:	f000 ff2f 	bl	8002736 <xTaskCreateStatic>
 80018d8:	4603      	mov	r3, r0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e01c      	b.n	8001918 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685c      	ldr	r4, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff9a 	bl	800182c <makeFreeRtosPriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4632      	mov	r2, r6
 8001906:	4629      	mov	r1, r5
 8001908:	4620      	mov	r0, r4
 800190a:	f000 ff73 	bl	80027f4 <xTaskCreate>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	d001      	beq.n	8001918 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001922 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <osDelay+0x16>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	e000      	b.n	800193a <osDelay+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f001 f8a2 	bl	8002a84 <vTaskDelay>
  
  return osOK;
 8001940:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af02      	add	r7, sp, #8
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00f      	beq.n	800197c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10a      	bne.n	8001978 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	9200      	str	r2, [sp, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2001      	movs	r0, #1
 8001970:	f000 f9bc 	bl	8001cec <xQueueGenericCreateStatic>
 8001974:	4603      	mov	r3, r0
 8001976:	e016      	b.n	80019a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001978:	2300      	movs	r3, #0
 800197a:	e014      	b.n	80019a6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d110      	bne.n	80019a4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001982:	2203      	movs	r2, #3
 8001984:	2100      	movs	r1, #0
 8001986:	2001      	movs	r0, #1
 8001988:	f000 fa2c 	bl	8001de4 <xQueueGenericCreate>
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <osSemaphoreCreate+0x56>
 8001994:	2300      	movs	r3, #0
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fa80 	bl	8001ea0 <xQueueGenericSend>
      return sema;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	e000      	b.n	80019a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80019a4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	e03a      	b.n	8001a3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d2:	d103      	bne.n	80019dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e009      	b.n	80019f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80019f0:	f7ff ff33 	bl	800185a <inHandlerMode>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d017      	beq.n	8001a2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	461a      	mov	r2, r3
 8001a00:	2100      	movs	r1, #0
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fcee 	bl	80023e4 <xQueueReceiveFromISR>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <osSemaphoreWait+0x62>
      return osErrorOS;
 8001a0e:	23ff      	movs	r3, #255	@ 0xff
 8001a10:	e015      	b.n	8001a3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d011      	beq.n	8001a3c <osSemaphoreWait+0x8c>
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <osSemaphoreWait+0x98>)
 8001a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f3bf 8f4f 	dsb	sy
 8001a24:	f3bf 8f6f 	isb	sy
 8001a28:	e008      	b.n	8001a3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fbc9 	bl	80021c4 <xQueueSemaphoreTake>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d001      	beq.n	8001a3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001a38:	23ff      	movs	r3, #255	@ 0xff
 8001a3a:	e000      	b.n	8001a3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000ed04 	.word	0xe000ed04

08001a4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001a5c:	f7ff fefd 	bl	800185a <inHandlerMode>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d016      	beq.n	8001a94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fb19 	bl	80020a4 <xQueueGiveFromISR>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d001      	beq.n	8001a7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001a78:	23ff      	movs	r3, #255	@ 0xff
 8001a7a:	e017      	b.n	8001aac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d013      	beq.n	8001aaa <osSemaphoreRelease+0x5e>
 8001a82:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <osSemaphoreRelease+0x68>)
 8001a84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	f3bf 8f6f 	isb	sy
 8001a92:	e00a      	b.n	8001aaa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fa00 	bl	8001ea0 <xQueueGenericSend>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001aa6:	23ff      	movs	r3, #255	@ 0xff
 8001aa8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	e000ed04 	.word	0xe000ed04

08001ab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f103 0208 	add.w	r2, r3, #8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f103 0208 	add.w	r2, r3, #8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f103 0208 	add.w	r2, r3, #8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6a:	d103      	bne.n	8001b74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e00c      	b.n	8001b8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3308      	adds	r3, #8
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e002      	b.n	8001b82 <vListInsert+0x2e>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d2f6      	bcs.n	8001b7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6892      	ldr	r2, [r2, #8]
 8001bda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6852      	ldr	r2, [r2, #4]
 8001be4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d103      	bne.n	8001bf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
	...

08001c18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10b      	bne.n	8001c44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c30:	f383 8811 	msr	BASEPRI, r3
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001c44:	f001 feb2 	bl	80039ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	441a      	add	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c74:	3b01      	subs	r3, #1
 8001c76:	68f9      	ldr	r1, [r7, #12]
 8001c78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	441a      	add	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	22ff      	movs	r2, #255	@ 0xff
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	22ff      	movs	r2, #255	@ 0xff
 8001c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d114      	bne.n	8001cc4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01a      	beq.n	8001cd8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3310      	adds	r3, #16
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 f97e 	bl	8002fa8 <xTaskRemoveFromEventList>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d012      	beq.n	8001cd8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <xQueueGenericReset+0xd0>)
 8001cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	f3bf 8f6f 	isb	sy
 8001cc2:	e009      	b.n	8001cd8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3310      	adds	r3, #16
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fef5 	bl	8001ab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3324      	adds	r3, #36	@ 0x24
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fef0 	bl	8001ab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cd8:	f001 fe98 	bl	8003a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000ed04 	.word	0xe000ed04

08001cec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	@ 0x38
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10b      	bne.n	8001d36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <xQueueGenericCreateStatic+0x56>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <xQueueGenericCreateStatic+0x5a>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <xQueueGenericCreateStatic+0x5c>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	623b      	str	r3, [r7, #32]
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <xQueueGenericCreateStatic+0x84>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <xQueueGenericCreateStatic+0x88>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <xQueueGenericCreateStatic+0x8a>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10b      	bne.n	8001d92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d7e:	f383 8811 	msr	BASEPRI, r3
 8001d82:	f3bf 8f6f 	isb	sy
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	61fb      	str	r3, [r7, #28]
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	e7fd      	b.n	8001d8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d92:	2348      	movs	r3, #72	@ 0x48
 8001d94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b48      	cmp	r3, #72	@ 0x48
 8001d9a:	d00b      	beq.n	8001db4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da0:	f383 8811 	msr	BASEPRI, r3
 8001da4:	f3bf 8f6f 	isb	sy
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	61bb      	str	r3, [r7, #24]
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dc6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f844 	bl	8001e62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3730      	adds	r7, #48	@ 0x30
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <xQueueGenericCreate+0x2c>
	__asm volatile
 8001df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dfc:	f383 8811 	msr	BASEPRI, r3
 8001e00:	f3bf 8f6f 	isb	sy
 8001e04:	f3bf 8f4f 	dsb	sy
 8001e08:	613b      	str	r3, [r7, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e004      	b.n	8001e26 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3348      	adds	r3, #72	@ 0x48
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fec0 	bl	8003bb0 <pvPortMalloc>
 8001e30:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00f      	beq.n	8001e58 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	3348      	adds	r3, #72	@ 0x48
 8001e3c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e46:	79fa      	ldrb	r2, [r7, #7]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f805 	bl	8001e62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001e58:	69bb      	ldr	r3, [r7, #24]
	}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e002      	b.n	8001e84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e90:	2101      	movs	r1, #1
 8001e92:	69b8      	ldr	r0, [r7, #24]
 8001e94:	f7ff fec0 	bl	8001c18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	@ 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10b      	bne.n	8001ed4 <xQueueGenericSend+0x34>
	__asm volatile
 8001ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec0:	f383 8811 	msr	BASEPRI, r3
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	f3bf 8f4f 	dsb	sy
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <xQueueGenericSend+0x42>
 8001eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <xQueueGenericSend+0x46>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <xQueueGenericSend+0x48>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <xQueueGenericSend+0x64>
	__asm volatile
 8001eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ef0:	f383 8811 	msr	BASEPRI, r3
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d103      	bne.n	8001f12 <xQueueGenericSend+0x72>
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <xQueueGenericSend+0x76>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <xQueueGenericSend+0x78>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10b      	bne.n	8001f34 <xQueueGenericSend+0x94>
	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	623b      	str	r3, [r7, #32]
}
 8001f2e:	bf00      	nop
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f34:	f001 fa02 	bl	800333c <xTaskGetSchedulerState>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <xQueueGenericSend+0xa4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <xQueueGenericSend+0xa8>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <xQueueGenericSend+0xaa>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10b      	bne.n	8001f66 <xQueueGenericSend+0xc6>
	__asm volatile
 8001f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	61fb      	str	r3, [r7, #28]
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	e7fd      	b.n	8001f62 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f66:	f001 fd21 	bl	80039ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <xQueueGenericSend+0xdc>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d129      	bne.n	8001fd0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f82:	f000 fac8 	bl	8002516 <prvCopyDataToQueue>
 8001f86:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d010      	beq.n	8001fb2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f92:	3324      	adds	r3, #36	@ 0x24
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 f807 	bl	8002fa8 <xTaskRemoveFromEventList>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <xQueueGenericSend+0x200>)
 8001fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	e00a      	b.n	8001fc8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001fb8:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <xQueueGenericSend+0x200>)
 8001fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001fc8:	f001 fd20 	bl	8003a0c <vPortExitCritical>
				return pdPASS;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e063      	b.n	8002098 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fd6:	f001 fd19 	bl	8003a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e05c      	b.n	8002098 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f841 	bl	8003070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ff2:	f001 fd0b 	bl	8003a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ff6:	f000 fde5 	bl	8002bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ffa:	f001 fcd7 	bl	80039ac <vPortEnterCritical>
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002004:	b25b      	sxtb	r3, r3
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200a:	d103      	bne.n	8002014 <xQueueGenericSend+0x174>
 800200c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002016:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800201a:	b25b      	sxtb	r3, r3
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d103      	bne.n	800202a <xQueueGenericSend+0x18a>
 8002022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800202a:	f001 fcef 	bl	8003a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800202e:	1d3a      	adds	r2, r7, #4
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f001 f830 	bl	800309c <xTaskCheckForTimeOut>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d124      	bne.n	800208c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002042:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002044:	f000 fb5f 	bl	8002706 <prvIsQueueFull>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d018      	beq.n	8002080 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002050:	3310      	adds	r3, #16
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f000 ff80 	bl	8002f5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800205c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800205e:	f000 faea 	bl	8002636 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002062:	f000 fdbd 	bl	8002be0 <xTaskResumeAll>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f af7c 	bne.w	8001f66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800206e:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <xQueueGenericSend+0x200>)
 8002070:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f3bf 8f4f 	dsb	sy
 800207a:	f3bf 8f6f 	isb	sy
 800207e:	e772      	b.n	8001f66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002082:	f000 fad8 	bl	8002636 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002086:	f000 fdab 	bl	8002be0 <xTaskResumeAll>
 800208a:	e76c      	b.n	8001f66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800208c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800208e:	f000 fad2 	bl	8002636 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002092:	f000 fda5 	bl	8002be0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002096:	2300      	movs	r3, #0
		}
	}
}
 8002098:	4618      	mov	r0, r3
 800209a:	3738      	adds	r7, #56	@ 0x38
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	e000ed04 	.word	0xe000ed04

080020a4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	@ 0x38
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80020b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	623b      	str	r3, [r7, #32]
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80020d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80020d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	61fb      	str	r3, [r7, #28]
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80020f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <xQueueGiveFromISR+0x5c>
 80020f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <xQueueGiveFromISR+0x60>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <xQueueGiveFromISR+0x62>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10b      	bne.n	8002122 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800210a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	61bb      	str	r3, [r7, #24]
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	e7fd      	b.n	800211e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002122:	f001 fd05 	bl	8003b30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002126:	f3ef 8211 	mrs	r2, BASEPRI
 800212a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800212e:	f383 8811 	msr	BASEPRI, r3
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	f3bf 8f4f 	dsb	sy
 800213a:	617a      	str	r2, [r7, #20]
 800213c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800213e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002140:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002146:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800214e:	429a      	cmp	r2, r3
 8002150:	d22b      	bcs.n	80021aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800215c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002162:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002164:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d112      	bne.n	8002194 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800216e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002178:	3324      	adds	r3, #36	@ 0x24
 800217a:	4618      	mov	r0, r3
 800217c:	f000 ff14 	bl	8002fa8 <xTaskRemoveFromEventList>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00e      	beq.n	80021a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00b      	beq.n	80021a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002198:	3301      	adds	r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	b25a      	sxtb	r2, r3
 800219e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80021a4:	2301      	movs	r3, #1
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a8:	e001      	b.n	80021ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80021ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80021b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80021ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3738      	adds	r7, #56	@ 0x38
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08e      	sub	sp, #56	@ 0x38
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80021da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80021e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	623b      	str	r3, [r7, #32]
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80021f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	61fb      	str	r3, [r7, #28]
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002218:	f001 f890 	bl	800333c <xTaskGetSchedulerState>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <xQueueSemaphoreTake+0x64>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <xQueueSemaphoreTake+0x68>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <xQueueSemaphoreTake+0x6a>
 800222c:	2300      	movs	r3, #0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	61bb      	str	r3, [r7, #24]
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	e7fd      	b.n	8002246 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800224a:	f001 fbaf 	bl	80039ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800224e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	d024      	beq.n	80022a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800225a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002260:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d104      	bne.n	8002274 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800226a:	f001 fa35 	bl	80036d8 <pvTaskIncrementMutexHeldCount>
 800226e:	4602      	mov	r2, r0
 8002270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002272:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00f      	beq.n	800229c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800227c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227e:	3310      	adds	r3, #16
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fe91 	bl	8002fa8 <xTaskRemoveFromEventList>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800228c:	4b54      	ldr	r3, [pc, #336]	@ (80023e0 <xQueueSemaphoreTake+0x21c>)
 800228e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800229c:	f001 fbb6 	bl	8003a0c <vPortExitCritical>
				return pdPASS;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e098      	b.n	80023d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d112      	bne.n	80022d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80022aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00b      	beq.n	80022c8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80022b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	617b      	str	r3, [r7, #20]
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80022c8:	f001 fba0 	bl	8003a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e082      	b.n	80023d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fec8 	bl	8003070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022e0:	2301      	movs	r3, #1
 80022e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022e4:	f001 fb92 	bl	8003a0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022e8:	f000 fc6c 	bl	8002bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022ec:	f001 fb5e 	bl	80039ac <vPortEnterCritical>
 80022f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022f6:	b25b      	sxtb	r3, r3
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d103      	bne.n	8002306 <xQueueSemaphoreTake+0x142>
 80022fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002308:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800230c:	b25b      	sxtb	r3, r3
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d103      	bne.n	800231c <xQueueSemaphoreTake+0x158>
 8002314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800231c:	f001 fb76 	bl	8003a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002320:	463a      	mov	r2, r7
 8002322:	f107 030c 	add.w	r3, r7, #12
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f000 feb7 	bl	800309c <xTaskCheckForTimeOut>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d132      	bne.n	800239a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002334:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002336:	f000 f9d0 	bl	80026da <prvIsQueueEmpty>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d026      	beq.n	800238e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002348:	f001 fb30 	bl	80039ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800234c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	f001 f811 	bl	8003378 <xTaskPriorityInherit>
 8002356:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002358:	f001 fb58 	bl	8003a0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235e:	3324      	adds	r3, #36	@ 0x24
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fdf9 	bl	8002f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800236a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800236c:	f000 f963 	bl	8002636 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002370:	f000 fc36 	bl	8002be0 <xTaskResumeAll>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	f47f af67 	bne.w	800224a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800237c:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <xQueueSemaphoreTake+0x21c>)
 800237e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	e75d      	b.n	800224a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800238e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002390:	f000 f951 	bl	8002636 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002394:	f000 fc24 	bl	8002be0 <xTaskResumeAll>
 8002398:	e757      	b.n	800224a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800239a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800239c:	f000 f94b 	bl	8002636 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023a0:	f000 fc1e 	bl	8002be0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023a6:	f000 f998 	bl	80026da <prvIsQueueEmpty>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f43f af4c 	beq.w	800224a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00d      	beq.n	80023d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80023b8:	f001 faf8 	bl	80039ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80023bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023be:	f000 f893 	bl	80024e8 <prvGetDisinheritPriorityAfterTimeout>
 80023c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 f8e2 	bl	8003594 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80023d0:	f001 fb1c 	bl	8003a0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3738      	adds	r7, #56	@ 0x38
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000ed04 	.word	0xe000ed04

080023e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	@ 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80023f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80023fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	623b      	str	r3, [r7, #32]
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	e7fd      	b.n	800240e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <xQueueReceiveFromISR+0x3c>
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <xQueueReceiveFromISR+0x40>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <xQueueReceiveFromISR+0x42>
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10b      	bne.n	8002442 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800242a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800242e:	f383 8811 	msr	BASEPRI, r3
 8002432:	f3bf 8f6f 	isb	sy
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	61fb      	str	r3, [r7, #28]
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	e7fd      	b.n	800243e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002442:	f001 fb75 	bl	8003b30 <vPortValidateInterruptPriority>
	__asm volatile
 8002446:	f3ef 8211 	mrs	r2, BASEPRI
 800244a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	61ba      	str	r2, [r7, #24]
 800245c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800245e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002466:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d02f      	beq.n	80024ce <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800247c:	f000 f8b5 	bl	80025ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002482:	1e5a      	subs	r2, r3, #1
 8002484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002486:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002488:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d112      	bne.n	80024b8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249c:	3310      	adds	r3, #16
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fd82 	bl	8002fa8 <xTaskRemoveFromEventList>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00e      	beq.n	80024c8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e007      	b.n	80024c8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80024b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024bc:	3301      	adds	r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	b25a      	sxtb	r2, r3
 80024c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80024c8:	2301      	movs	r3, #1
 80024ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80024cc:	e001      	b.n	80024d2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f383 8811 	msr	BASEPRI, r3
}
 80024dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3738      	adds	r7, #56	@ 0x38
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e001      	b.n	800250a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800250a:	68fb      	ldr	r3, [r7, #12]
	}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d14d      	bne.n	80025d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 ff9f 	bl	8003484 <xTaskPriorityDisinherit>
 8002546:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e043      	b.n	80025d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6898      	ldr	r0, [r3, #8]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	461a      	mov	r2, r3
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	f001 fd87 	bl	8004074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	441a      	add	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	d32b      	bcc.n	80025d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	e026      	b.n	80025d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68d8      	ldr	r0, [r3, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	461a      	mov	r2, r3
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	f001 fd6d 	bl	8004074 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	425b      	negs	r3, r3
 80025a4:	441a      	add	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d207      	bcs.n	80025c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	425b      	negs	r3, r3
 80025c0:	441a      	add	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d105      	bne.n	80025d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80025e0:	697b      	ldr	r3, [r7, #20]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d018      	beq.n	800262e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	441a      	add	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d303      	bcc.n	800261e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	461a      	mov	r2, r3
 8002628:	6838      	ldr	r0, [r7, #0]
 800262a:	f001 fd23 	bl	8004074 <memcpy>
	}
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800263e:	f001 f9b5 	bl	80039ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002648:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800264a:	e011      	b.n	8002670 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3324      	adds	r3, #36	@ 0x24
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fca5 	bl	8002fa8 <xTaskRemoveFromEventList>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002664:	f000 fd7e 	bl	8003164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	3b01      	subs	r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	dce9      	bgt.n	800264c <prvUnlockQueue+0x16>
 8002678:	e000      	b.n	800267c <prvUnlockQueue+0x46>
					break;
 800267a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	22ff      	movs	r2, #255	@ 0xff
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002684:	f001 f9c2 	bl	8003a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002688:	f001 f990 	bl	80039ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002692:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002694:	e011      	b.n	80026ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d012      	beq.n	80026c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3310      	adds	r3, #16
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fc80 	bl	8002fa8 <xTaskRemoveFromEventList>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80026ae:	f000 fd59 	bl	8003164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80026b2:	7bbb      	ldrb	r3, [r7, #14]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	dce9      	bgt.n	8002696 <prvUnlockQueue+0x60>
 80026c2:	e000      	b.n	80026c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80026c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	22ff      	movs	r2, #255	@ 0xff
 80026ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80026ce:	f001 f99d 	bl	8003a0c <vPortExitCritical>
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026e2:	f001 f963 	bl	80039ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	e001      	b.n	80026f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026f8:	f001 f988 	bl	8003a0c <vPortExitCritical>

	return xReturn;
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800270e:	f001 f94d 	bl	80039ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271a:	429a      	cmp	r2, r3
 800271c:	d102      	bne.n	8002724 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800271e:	2301      	movs	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e001      	b.n	8002728 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002728:	f001 f970 	bl	8003a0c <vPortExitCritical>

	return xReturn;
 800272c:	68fb      	ldr	r3, [r7, #12]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002736:	b580      	push	{r7, lr}
 8002738:	b08e      	sub	sp, #56	@ 0x38
 800273a:	af04      	add	r7, sp, #16
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <xTaskCreateStatic+0x2c>
	__asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	623b      	str	r3, [r7, #32]
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	e7fd      	b.n	800275e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	61fb      	str	r3, [r7, #28]
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002780:	23a0      	movs	r3, #160	@ 0xa0
 8002782:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2ba0      	cmp	r3, #160	@ 0xa0
 8002788:	d00b      	beq.n	80027a2 <xTaskCreateStatic+0x6c>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	61bb      	str	r3, [r7, #24]
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	e7fd      	b.n	800279e <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01e      	beq.n	80027e6 <xTaskCreateStatic+0xb0>
 80027a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01b      	beq.n	80027e6 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027c0:	2300      	movs	r3, #0
 80027c2:	9303      	str	r3, [sp, #12]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f851 	bl	8002880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027e0:	f000 f8e6 	bl	80029b0 <prvAddNewTaskToReadyList>
 80027e4:	e001      	b.n	80027ea <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027ea:	697b      	ldr	r3, [r7, #20]
	}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3728      	adds	r7, #40	@ 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	@ 0x30
 80027f8:	af04      	add	r7, sp, #16
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f9d1 	bl	8003bb0 <pvPortMalloc>
 800280e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00e      	beq.n	8002834 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002816:	20a0      	movs	r0, #160	@ 0xa0
 8002818:	f001 f9ca 	bl	8003bb0 <pvPortMalloc>
 800281c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
 800282a:	e005      	b.n	8002838 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f001 fa87 	bl	8003d40 <vPortFree>
 8002832:	e001      	b.n	8002838 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d017      	beq.n	800286e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	2300      	movs	r3, #0
 800284a:	9303      	str	r3, [sp, #12]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f80f 	bl	8002880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002862:	69f8      	ldr	r0, [r7, #28]
 8002864:	f000 f8a4 	bl	80029b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002868:	2301      	movs	r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	e002      	b.n	8002874 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002874:	69bb      	ldr	r3, [r7, #24]
	}
 8002876:	4618      	mov	r0, r3
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800288e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002898:	3b01      	subs	r3, #1
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f023 0307 	bic.w	r3, r3, #7
 80028a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <prvInitialiseNewTask+0x4a>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	617b      	str	r3, [r7, #20]
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	e7fd      	b.n	80028c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e012      	b.n	80028f6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	7819      	ldrb	r1, [r3, #0]
 80028d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	3334      	adds	r3, #52	@ 0x34
 80028e0:	460a      	mov	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	2b0f      	cmp	r3, #15
 80028fa:	d9e9      	bls.n	80028d0 <prvInitialiseNewTask+0x50>
 80028fc:	e000      	b.n	8002900 <prvInitialiseNewTask+0x80>
		{
			break;
 80028fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	2b06      	cmp	r3, #6
 800290c:	d901      	bls.n	8002912 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800290e:	2306      	movs	r3, #6
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002916:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800291c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002920:	2200      	movs	r2, #0
 8002922:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	3304      	adds	r3, #4
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff f8e4 	bl	8001af6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	3318      	adds	r3, #24
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f8df 	bl	8001af6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800293c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	f1c3 0207 	rsb	r2, r3, #7
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	2200      	movs	r2, #0
 8002952:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002958:	2200      	movs	r2, #0
 800295a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	334c      	adds	r3, #76	@ 0x4c
 8002962:	224c      	movs	r2, #76	@ 0x4c
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fb00 	bl	8003f6c <memset>
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <prvInitialiseNewTask+0x124>)
 8002970:	651a      	str	r2, [r3, #80]	@ 0x50
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	4a0c      	ldr	r2, [pc, #48]	@ (80029a8 <prvInitialiseNewTask+0x128>)
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	4a0c      	ldr	r2, [pc, #48]	@ (80029ac <prvInitialiseNewTask+0x12c>)
 800297c:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	68f9      	ldr	r1, [r7, #12]
 8002982:	69b8      	ldr	r0, [r7, #24]
 8002984:	f000 ff22 	bl	80037cc <pxPortInitialiseStack>
 8002988:	4602      	mov	r2, r0
 800298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800298e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800299a:	bf00      	nop
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200010c4 	.word	0x200010c4
 80029a8:	2000112c 	.word	0x2000112c
 80029ac:	20001194 	.word	0x20001194

080029b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029b8:	f000 fff8 	bl	80039ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <prvAddNewTaskToReadyList+0xb8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a29      	ldr	r2, [pc, #164]	@ (8002a68 <prvAddNewTaskToReadyList+0xb8>)
 80029c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029c6:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <prvAddNewTaskToReadyList+0xbc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029ce:	4a27      	ldr	r2, [pc, #156]	@ (8002a6c <prvAddNewTaskToReadyList+0xbc>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029d4:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <prvAddNewTaskToReadyList+0xb8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d110      	bne.n	80029fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029dc:	f000 fbe6 	bl	80031ac <prvInitialiseTaskLists>
 80029e0:	e00d      	b.n	80029fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029e2:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <prvAddNewTaskToReadyList+0xc0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029ea:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <prvAddNewTaskToReadyList+0xbc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d802      	bhi.n	80029fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029f8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a6c <prvAddNewTaskToReadyList+0xbc>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <prvAddNewTaskToReadyList+0xc4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a1b      	ldr	r2, [pc, #108]	@ (8002a74 <prvAddNewTaskToReadyList+0xc4>)
 8002a06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <prvAddNewTaskToReadyList+0xc8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	4a18      	ldr	r2, [pc, #96]	@ (8002a78 <prvAddNewTaskToReadyList+0xc8>)
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4a15      	ldr	r2, [pc, #84]	@ (8002a7c <prvAddNewTaskToReadyList+0xcc>)
 8002a28:	441a      	add	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f7ff f86c 	bl	8001b0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a36:	f000 ffe9 	bl	8003a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <prvAddNewTaskToReadyList+0xc0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00e      	beq.n	8002a60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <prvAddNewTaskToReadyList+0xbc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <prvAddNewTaskToReadyList+0xd0>)
 8002a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000478 	.word	0x20000478
 8002a6c:	20000378 	.word	0x20000378
 8002a70:	20000484 	.word	0x20000484
 8002a74:	20000494 	.word	0x20000494
 8002a78:	20000480 	.word	0x20000480
 8002a7c:	2000037c 	.word	0x2000037c
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a96:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <vTaskDelay+0x64>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <vTaskDelay+0x32>
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	60bb      	str	r3, [r7, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	e7fd      	b.n	8002ab2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ab6:	f000 f885 	bl	8002bc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002aba:	2100      	movs	r1, #0
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fe1f 	bl	8003700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ac2:	f000 f88d 	bl	8002be0 <xTaskResumeAll>
 8002ac6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d107      	bne.n	8002ade <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002ace:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <vTaskDelay+0x68>)
 8002ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200004a0 	.word	0x200004a0
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	@ 0x28
 8002af4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002afe:	463a      	mov	r2, r7
 8002b00:	1d39      	adds	r1, r7, #4
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fb22 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b0c:	6839      	ldr	r1, [r7, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	9202      	str	r2, [sp, #8]
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	2300      	movs	r3, #0
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	4921      	ldr	r1, [pc, #132]	@ (8002ba4 <vTaskStartScheduler+0xb4>)
 8002b20:	4821      	ldr	r0, [pc, #132]	@ (8002ba8 <vTaskStartScheduler+0xb8>)
 8002b22:	f7ff fe08 	bl	8002736 <xTaskCreateStatic>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a20      	ldr	r2, [pc, #128]	@ (8002bac <vTaskStartScheduler+0xbc>)
 8002b2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <vTaskStartScheduler+0xbc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b34:	2301      	movs	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e001      	b.n	8002b3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d11b      	bne.n	8002b7c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	613b      	str	r3, [r7, #16]
}
 8002b56:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b58:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <vTaskStartScheduler+0xc0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	334c      	adds	r3, #76	@ 0x4c
 8002b5e:	4a15      	ldr	r2, [pc, #84]	@ (8002bb4 <vTaskStartScheduler+0xc4>)
 8002b60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <vTaskStartScheduler+0xc8>)
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b6a:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <vTaskStartScheduler+0xcc>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b70:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <vTaskStartScheduler+0xd0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b76:	f000 fea7 	bl	80038c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b7a:	e00f      	b.n	8002b9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d10b      	bne.n	8002b9c <vTaskStartScheduler+0xac>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	60fb      	str	r3, [r7, #12]
}
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <vTaskStartScheduler+0xa8>
}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	080041c0 	.word	0x080041c0
 8002ba8:	0800317d 	.word	0x0800317d
 8002bac:	2000049c 	.word	0x2000049c
 8002bb0:	20000378 	.word	0x20000378
 8002bb4:	20000010 	.word	0x20000010
 8002bb8:	20000498 	.word	0x20000498
 8002bbc:	20000484 	.word	0x20000484
 8002bc0:	2000047c 	.word	0x2000047c

08002bc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002bc8:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <vTaskSuspendAll+0x18>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a03      	ldr	r2, [pc, #12]	@ (8002bdc <vTaskSuspendAll+0x18>)
 8002bd0:	6013      	str	r3, [r2, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	200004a0 	.word	0x200004a0

08002be0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bee:	4b42      	ldr	r3, [pc, #264]	@ (8002cf8 <xTaskResumeAll+0x118>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <xTaskResumeAll+0x2e>
	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	603b      	str	r3, [r7, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	e7fd      	b.n	8002c0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c0e:	f000 fecd 	bl	80039ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c12:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <xTaskResumeAll+0x118>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	4a37      	ldr	r2, [pc, #220]	@ (8002cf8 <xTaskResumeAll+0x118>)
 8002c1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c1c:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <xTaskResumeAll+0x118>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d161      	bne.n	8002ce8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c24:	4b35      	ldr	r3, [pc, #212]	@ (8002cfc <xTaskResumeAll+0x11c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d05d      	beq.n	8002ce8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c2c:	e02e      	b.n	8002c8c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c2e:	4b34      	ldr	r3, [pc, #208]	@ (8002d00 <xTaskResumeAll+0x120>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3318      	adds	r3, #24
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe ffc2 	bl	8001bc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe ffbd 	bl	8001bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	2201      	movs	r2, #1
 8002c50:	409a      	lsls	r2, r3
 8002c52:	4b2c      	ldr	r3, [pc, #176]	@ (8002d04 <xTaskResumeAll+0x124>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	4a2a      	ldr	r2, [pc, #168]	@ (8002d04 <xTaskResumeAll+0x124>)
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <xTaskResumeAll+0x128>)
 8002c6a:	441a      	add	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe ff4b 	bl	8001b0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7c:	4b23      	ldr	r3, [pc, #140]	@ (8002d0c <xTaskResumeAll+0x12c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c86:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <xTaskResumeAll+0x130>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d00 <xTaskResumeAll+0x120>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1cc      	bne.n	8002c2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c9a:	f000 fb2b 	bl	80032f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <xTaskResumeAll+0x134>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002caa:	f000 f837 	bl	8002d1c <xTaskIncrementTick>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <xTaskResumeAll+0x130>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f1      	bne.n	8002caa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002cc6:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <xTaskResumeAll+0x134>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ccc:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <xTaskResumeAll+0x130>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <xTaskResumeAll+0x138>)
 8002cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ce8:	f000 fe90 	bl	8003a0c <vPortExitCritical>

	return xAlreadyYielded;
 8002cec:	68bb      	ldr	r3, [r7, #8]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200004a0 	.word	0x200004a0
 8002cfc:	20000478 	.word	0x20000478
 8002d00:	20000438 	.word	0x20000438
 8002d04:	20000480 	.word	0x20000480
 8002d08:	2000037c 	.word	0x2000037c
 8002d0c:	20000378 	.word	0x20000378
 8002d10:	2000048c 	.word	0x2000048c
 8002d14:	20000488 	.word	0x20000488
 8002d18:	e000ed04 	.word	0xe000ed04

08002d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d26:	4b51      	ldr	r3, [pc, #324]	@ (8002e6c <xTaskIncrementTick+0x150>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 808e 	bne.w	8002e4c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d30:	4b4f      	ldr	r3, [pc, #316]	@ (8002e70 <xTaskIncrementTick+0x154>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d38:	4a4d      	ldr	r2, [pc, #308]	@ (8002e70 <xTaskIncrementTick+0x154>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d121      	bne.n	8002d88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d44:	4b4b      	ldr	r3, [pc, #300]	@ (8002e74 <xTaskIncrementTick+0x158>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	603b      	str	r3, [r7, #0]
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <xTaskIncrementTick+0x46>
 8002d66:	4b43      	ldr	r3, [pc, #268]	@ (8002e74 <xTaskIncrementTick+0x158>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	4b42      	ldr	r3, [pc, #264]	@ (8002e78 <xTaskIncrementTick+0x15c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a40      	ldr	r2, [pc, #256]	@ (8002e74 <xTaskIncrementTick+0x158>)
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4a40      	ldr	r2, [pc, #256]	@ (8002e78 <xTaskIncrementTick+0x15c>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b40      	ldr	r3, [pc, #256]	@ (8002e7c <xTaskIncrementTick+0x160>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a3e      	ldr	r2, [pc, #248]	@ (8002e7c <xTaskIncrementTick+0x160>)
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	f000 fab6 	bl	80032f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d88:	4b3d      	ldr	r3, [pc, #244]	@ (8002e80 <xTaskIncrementTick+0x164>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d34d      	bcc.n	8002e2e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d92:	4b38      	ldr	r3, [pc, #224]	@ (8002e74 <xTaskIncrementTick+0x158>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <xTaskIncrementTick+0x84>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <xTaskIncrementTick+0x86>
 8002da0:	2300      	movs	r3, #0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002da6:	4b36      	ldr	r3, [pc, #216]	@ (8002e80 <xTaskIncrementTick+0x164>)
 8002da8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dac:	601a      	str	r2, [r3, #0]
					break;
 8002dae:	e03e      	b.n	8002e2e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002db0:	4b30      	ldr	r3, [pc, #192]	@ (8002e74 <xTaskIncrementTick+0x158>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d203      	bcs.n	8002dd0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002e80 <xTaskIncrementTick+0x164>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]
						break;
 8002dce:	e02e      	b.n	8002e2e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fef5 	bl	8001bc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	3318      	adds	r3, #24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe feec 	bl	8001bc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df0:	2201      	movs	r2, #1
 8002df2:	409a      	lsls	r2, r3
 8002df4:	4b23      	ldr	r3, [pc, #140]	@ (8002e84 <xTaskIncrementTick+0x168>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <xTaskIncrementTick+0x168>)
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e88 <xTaskIncrementTick+0x16c>)
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7fe fe7a 	bl	8001b0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <xTaskIncrementTick+0x170>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d3b4      	bcc.n	8002d92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e2c:	e7b1      	b.n	8002d92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e2e:	4b17      	ldr	r3, [pc, #92]	@ (8002e8c <xTaskIncrementTick+0x170>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e34:	4914      	ldr	r1, [pc, #80]	@ (8002e88 <xTaskIncrementTick+0x16c>)
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d907      	bls.n	8002e56 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002e46:	2301      	movs	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e004      	b.n	8002e56 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e4c:	4b10      	ldr	r3, [pc, #64]	@ (8002e90 <xTaskIncrementTick+0x174>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a0f      	ldr	r2, [pc, #60]	@ (8002e90 <xTaskIncrementTick+0x174>)
 8002e54:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e56:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <xTaskIncrementTick+0x178>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e62:	697b      	ldr	r3, [r7, #20]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	200004a0 	.word	0x200004a0
 8002e70:	2000047c 	.word	0x2000047c
 8002e74:	20000430 	.word	0x20000430
 8002e78:	20000434 	.word	0x20000434
 8002e7c:	20000490 	.word	0x20000490
 8002e80:	20000498 	.word	0x20000498
 8002e84:	20000480 	.word	0x20000480
 8002e88:	2000037c 	.word	0x2000037c
 8002e8c:	20000378 	.word	0x20000378
 8002e90:	20000488 	.word	0x20000488
 8002e94:	2000048c 	.word	0x2000048c

08002e98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e9e:	4b29      	ldr	r3, [pc, #164]	@ (8002f44 <vTaskSwitchContext+0xac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <vTaskSwitchContext+0xb0>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002eac:	e045      	b.n	8002f3a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002eae:	4b26      	ldr	r3, [pc, #152]	@ (8002f48 <vTaskSwitchContext+0xb0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002eb4:	4b25      	ldr	r3, [pc, #148]	@ (8002f4c <vTaskSwitchContext+0xb4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	f1c3 031f 	rsb	r3, r3, #31
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	4921      	ldr	r1, [pc, #132]	@ (8002f50 <vTaskSwitchContext+0xb8>)
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10b      	bne.n	8002ef6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	607b      	str	r3, [r7, #4]
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	e7fd      	b.n	8002ef2 <vTaskSwitchContext+0x5a>
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4a13      	ldr	r2, [pc, #76]	@ (8002f50 <vTaskSwitchContext+0xb8>)
 8002f02:	4413      	add	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	3308      	adds	r3, #8
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d104      	bne.n	8002f26 <vTaskSwitchContext+0x8e>
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a09      	ldr	r2, [pc, #36]	@ (8002f54 <vTaskSwitchContext+0xbc>)
 8002f2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f30:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <vTaskSwitchContext+0xbc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	334c      	adds	r3, #76	@ 0x4c
 8002f36:	4a08      	ldr	r2, [pc, #32]	@ (8002f58 <vTaskSwitchContext+0xc0>)
 8002f38:	6013      	str	r3, [r2, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	200004a0 	.word	0x200004a0
 8002f48:	2000048c 	.word	0x2000048c
 8002f4c:	20000480 	.word	0x20000480
 8002f50:	2000037c 	.word	0x2000037c
 8002f54:	20000378 	.word	0x20000378
 8002f58:	20000010 	.word	0x20000010

08002f5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10b      	bne.n	8002f84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	60fb      	str	r3, [r7, #12]
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	e7fd      	b.n	8002f80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f84:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <vTaskPlaceOnEventList+0x48>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3318      	adds	r3, #24
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fe fde1 	bl	8001b54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f92:	2101      	movs	r1, #1
 8002f94:	6838      	ldr	r0, [r7, #0]
 8002f96:	f000 fbb3 	bl	8003700 <prvAddCurrentTaskToDelayedList>
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000378 	.word	0x20000378

08002fa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	60fb      	str	r3, [r7, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	e7fd      	b.n	8002fd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	3318      	adds	r3, #24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fdf2 	bl	8001bc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <xTaskRemoveFromEventList+0xb0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11c      	bne.n	8003022 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe fde9 	bl	8001bc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	4b18      	ldr	r3, [pc, #96]	@ (800305c <xTaskRemoveFromEventList+0xb4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	4a16      	ldr	r2, [pc, #88]	@ (800305c <xTaskRemoveFromEventList+0xb4>)
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4a13      	ldr	r2, [pc, #76]	@ (8003060 <xTaskRemoveFromEventList+0xb8>)
 8003012:	441a      	add	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7fe fd77 	bl	8001b0e <vListInsertEnd>
 8003020:	e005      	b.n	800302e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3318      	adds	r3, #24
 8003026:	4619      	mov	r1, r3
 8003028:	480e      	ldr	r0, [pc, #56]	@ (8003064 <xTaskRemoveFromEventList+0xbc>)
 800302a:	f7fe fd70 	bl	8001b0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003032:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <xTaskRemoveFromEventList+0xc0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	429a      	cmp	r2, r3
 800303a:	d905      	bls.n	8003048 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800303c:	2301      	movs	r3, #1
 800303e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003040:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <xTaskRemoveFromEventList+0xc4>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e001      	b.n	800304c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800304c:	697b      	ldr	r3, [r7, #20]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200004a0 	.word	0x200004a0
 800305c:	20000480 	.word	0x20000480
 8003060:	2000037c 	.word	0x2000037c
 8003064:	20000438 	.word	0x20000438
 8003068:	20000378 	.word	0x20000378
 800306c:	2000048c 	.word	0x2000048c

08003070 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <vTaskInternalSetTimeOutState+0x24>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <vTaskInternalSetTimeOutState+0x28>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	605a      	str	r2, [r3, #4]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000490 	.word	0x20000490
 8003098:	2000047c 	.word	0x2000047c

0800309c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	613b      	str	r3, [r7, #16]
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	60fb      	str	r3, [r7, #12]
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	e7fd      	b.n	80030de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80030e2:	f000 fc63 	bl	80039ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80030e6:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <xTaskCheckForTimeOut+0xc0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d102      	bne.n	8003106 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e023      	b.n	800314e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <xTaskCheckForTimeOut+0xc4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d007      	beq.n	8003122 <xTaskCheckForTimeOut+0x86>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800311c:	2301      	movs	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	e015      	b.n	800314e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d20b      	bcs.n	8003144 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	1ad2      	subs	r2, r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff99 	bl	8003070 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	e004      	b.n	800314e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800314a:	2301      	movs	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800314e:	f000 fc5d 	bl	8003a0c <vPortExitCritical>

	return xReturn;
 8003152:	69fb      	ldr	r3, [r7, #28]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2000047c 	.word	0x2000047c
 8003160:	20000490 	.word	0x20000490

08003164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <vTaskMissedYield+0x14>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	2000048c 	.word	0x2000048c

0800317c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003184:	f000 f852 	bl	800322c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <prvIdleTask+0x28>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d9f9      	bls.n	8003184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <prvIdleTask+0x2c>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031a0:	e7f0      	b.n	8003184 <prvIdleTask+0x8>
 80031a2:	bf00      	nop
 80031a4:	2000037c 	.word	0x2000037c
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	e00c      	b.n	80031d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4a12      	ldr	r2, [pc, #72]	@ (800320c <prvInitialiseTaskLists+0x60>)
 80031c4:	4413      	add	r3, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fc76 	bl	8001ab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3301      	adds	r3, #1
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d9ef      	bls.n	80031b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031d8:	480d      	ldr	r0, [pc, #52]	@ (8003210 <prvInitialiseTaskLists+0x64>)
 80031da:	f7fe fc6d 	bl	8001ab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031de:	480d      	ldr	r0, [pc, #52]	@ (8003214 <prvInitialiseTaskLists+0x68>)
 80031e0:	f7fe fc6a 	bl	8001ab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031e4:	480c      	ldr	r0, [pc, #48]	@ (8003218 <prvInitialiseTaskLists+0x6c>)
 80031e6:	f7fe fc67 	bl	8001ab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031ea:	480c      	ldr	r0, [pc, #48]	@ (800321c <prvInitialiseTaskLists+0x70>)
 80031ec:	f7fe fc64 	bl	8001ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031f0:	480b      	ldr	r0, [pc, #44]	@ (8003220 <prvInitialiseTaskLists+0x74>)
 80031f2:	f7fe fc61 	bl	8001ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <prvInitialiseTaskLists+0x78>)
 80031f8:	4a05      	ldr	r2, [pc, #20]	@ (8003210 <prvInitialiseTaskLists+0x64>)
 80031fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <prvInitialiseTaskLists+0x7c>)
 80031fe:	4a05      	ldr	r2, [pc, #20]	@ (8003214 <prvInitialiseTaskLists+0x68>)
 8003200:	601a      	str	r2, [r3, #0]
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	2000037c 	.word	0x2000037c
 8003210:	20000408 	.word	0x20000408
 8003214:	2000041c 	.word	0x2000041c
 8003218:	20000438 	.word	0x20000438
 800321c:	2000044c 	.word	0x2000044c
 8003220:	20000464 	.word	0x20000464
 8003224:	20000430 	.word	0x20000430
 8003228:	20000434 	.word	0x20000434

0800322c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003232:	e019      	b.n	8003268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003234:	f000 fbba 	bl	80039ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003238:	4b10      	ldr	r3, [pc, #64]	@ (800327c <prvCheckTasksWaitingTermination+0x50>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe fcbd 	bl	8001bc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <prvCheckTasksWaitingTermination+0x54>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3b01      	subs	r3, #1
 8003250:	4a0b      	ldr	r2, [pc, #44]	@ (8003280 <prvCheckTasksWaitingTermination+0x54>)
 8003252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <prvCheckTasksWaitingTermination+0x58>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3b01      	subs	r3, #1
 800325a:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <prvCheckTasksWaitingTermination+0x58>)
 800325c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800325e:	f000 fbd5 	bl	8003a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f810 	bl	8003288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <prvCheckTasksWaitingTermination+0x58>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e1      	bne.n	8003234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	2000044c 	.word	0x2000044c
 8003280:	20000478 	.word	0x20000478
 8003284:	20000460 	.word	0x20000460

08003288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	334c      	adds	r3, #76	@ 0x4c
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fe71 	bl	8003f7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d108      	bne.n	80032b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fd49 	bl	8003d40 <vPortFree>
				vPortFree( pxTCB );
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fd46 	bl	8003d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032b4:	e019      	b.n	80032ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d103      	bne.n	80032c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fd3d 	bl	8003d40 <vPortFree>
	}
 80032c6:	e010      	b.n	80032ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d00b      	beq.n	80032ea <prvDeleteTCB+0x62>
	__asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	60fb      	str	r3, [r7, #12]
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	e7fd      	b.n	80032e6 <prvDeleteTCB+0x5e>
	}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <prvResetNextTaskUnblockTime+0x40>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <prvResetNextTaskUnblockTime+0x14>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <prvResetNextTaskUnblockTime+0x16>
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <prvResetNextTaskUnblockTime+0x44>)
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003316:	e008      	b.n	800332a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003318:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <prvResetNextTaskUnblockTime+0x40>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4a04      	ldr	r2, [pc, #16]	@ (8003338 <prvResetNextTaskUnblockTime+0x44>)
 8003328:	6013      	str	r3, [r2, #0]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	20000430 	.word	0x20000430
 8003338:	20000498 	.word	0x20000498

0800333c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003342:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <xTaskGetSchedulerState+0x34>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800334a:	2301      	movs	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	e008      	b.n	8003362 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003350:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <xTaskGetSchedulerState+0x38>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003358:	2302      	movs	r3, #2
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	e001      	b.n	8003362 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003362:	687b      	ldr	r3, [r7, #4]
	}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000484 	.word	0x20000484
 8003374:	200004a0 	.word	0x200004a0

08003378 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d06e      	beq.n	800346c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003392:	4b39      	ldr	r3, [pc, #228]	@ (8003478 <xTaskPriorityInherit+0x100>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	429a      	cmp	r2, r3
 800339a:	d25e      	bcs.n	800345a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db06      	blt.n	80033b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a4:	4b34      	ldr	r3, [pc, #208]	@ (8003478 <xTaskPriorityInherit+0x100>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033aa:	f1c3 0207 	rsb	r2, r3, #7
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6959      	ldr	r1, [r3, #20]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4a2e      	ldr	r2, [pc, #184]	@ (800347c <xTaskPriorityInherit+0x104>)
 80033c4:	4413      	add	r3, r2
 80033c6:	4299      	cmp	r1, r3
 80033c8:	d101      	bne.n	80033ce <xTaskPriorityInherit+0x56>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xTaskPriorityInherit+0x58>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d03a      	beq.n	800344a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fbf3 	bl	8001bc4 <uxListRemove>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d115      	bne.n	8003410 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e8:	4924      	ldr	r1, [pc, #144]	@ (800347c <xTaskPriorityInherit+0x104>)
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <xTaskPriorityInherit+0x98>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	2201      	movs	r2, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43da      	mvns	r2, r3
 8003406:	4b1e      	ldr	r3, [pc, #120]	@ (8003480 <xTaskPriorityInherit+0x108>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4013      	ands	r3, r2
 800340c:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <xTaskPriorityInherit+0x108>)
 800340e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <xTaskPriorityInherit+0x100>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341e:	2201      	movs	r2, #1
 8003420:	409a      	lsls	r2, r3
 8003422:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <xTaskPriorityInherit+0x108>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	4a15      	ldr	r2, [pc, #84]	@ (8003480 <xTaskPriorityInherit+0x108>)
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4a10      	ldr	r2, [pc, #64]	@ (800347c <xTaskPriorityInherit+0x104>)
 800343a:	441a      	add	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3304      	adds	r3, #4
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7fe fb63 	bl	8001b0e <vListInsertEnd>
 8003448:	e004      	b.n	8003454 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800344a:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <xTaskPriorityInherit+0x100>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e008      	b.n	800346c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <xTaskPriorityInherit+0x100>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	429a      	cmp	r2, r3
 8003466:	d201      	bcs.n	800346c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003468:	2301      	movs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800346c:	68fb      	ldr	r3, [r7, #12]
	}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000378 	.word	0x20000378
 800347c:	2000037c 	.word	0x2000037c
 8003480:	20000480 	.word	0x20000480

08003484 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d070      	beq.n	800357c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800349a:	4b3b      	ldr	r3, [pc, #236]	@ (8003588 <xTaskPriorityDisinherit+0x104>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d00b      	beq.n	80034bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60fb      	str	r3, [r7, #12]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	60bb      	str	r3, [r7, #8]
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d044      	beq.n	800357c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d140      	bne.n	800357c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3304      	adds	r3, #4
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe fb60 	bl	8001bc4 <uxListRemove>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d115      	bne.n	8003536 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350e:	491f      	ldr	r1, [pc, #124]	@ (800358c <xTaskPriorityDisinherit+0x108>)
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xTaskPriorityDisinherit+0xb2>
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	2201      	movs	r2, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <xTaskPriorityDisinherit+0x10c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4013      	ands	r3, r2
 8003532:	4a17      	ldr	r2, [pc, #92]	@ (8003590 <xTaskPriorityDisinherit+0x10c>)
 8003534:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	f1c3 0207 	rsb	r2, r3, #7
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	2201      	movs	r2, #1
 8003550:	409a      	lsls	r2, r3
 8003552:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <xTaskPriorityDisinherit+0x10c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4313      	orrs	r3, r2
 8003558:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <xTaskPriorityDisinherit+0x10c>)
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4a08      	ldr	r2, [pc, #32]	@ (800358c <xTaskPriorityDisinherit+0x108>)
 800356a:	441a      	add	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f7fe facb 	bl	8001b0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800357c:	697b      	ldr	r3, [r7, #20]
	}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000378 	.word	0x20000378
 800358c:	2000037c 	.word	0x2000037c
 8003590:	20000480 	.word	0x20000480

08003594 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 808a 	beq.w	80036c2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	60fb      	str	r3, [r7, #12]
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	e7fd      	b.n	80035ca <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d902      	bls.n	80035de <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e002      	b.n	80035e4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d069      	beq.n	80036c2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d164      	bne.n	80036c2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80035f8:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d10b      	bne.n	800361a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	60bb      	str	r3, [r7, #8]
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	db04      	blt.n	8003638 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f1c3 0207 	rsb	r2, r3, #7
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6959      	ldr	r1, [r3, #20]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4a22      	ldr	r2, [pc, #136]	@ (80036d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003648:	4413      	add	r3, r2
 800364a:	4299      	cmp	r1, r3
 800364c:	d101      	bne.n	8003652 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d034      	beq.n	80036c2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	3304      	adds	r3, #4
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fab1 	bl	8001bc4 <uxListRemove>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d115      	bne.n	8003694 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366c:	4918      	ldr	r1, [pc, #96]	@ (80036d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <vTaskPriorityDisinheritAfterTimeout+0x100>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	2201      	movs	r2, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43da      	mvns	r2, r3
 800368a:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4013      	ands	r3, r2
 8003690:	4a10      	ldr	r2, [pc, #64]	@ (80036d4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003692:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	4a0c      	ldr	r2, [pc, #48]	@ (80036d4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4a07      	ldr	r2, [pc, #28]	@ (80036d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80036b4:	441a      	add	r2, r3
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3304      	adds	r3, #4
 80036ba:	4619      	mov	r1, r3
 80036bc:	4610      	mov	r0, r2
 80036be:	f7fe fa26 	bl	8001b0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036c2:	bf00      	nop
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000378 	.word	0x20000378
 80036d0:	2000037c 	.word	0x2000037c
 80036d4:	20000480 	.word	0x20000480

080036d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80036dc:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <pvTaskIncrementMutexHeldCount+0x24>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80036e4:	4b05      	ldr	r3, [pc, #20]	@ (80036fc <pvTaskIncrementMutexHeldCount+0x24>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036ea:	3201      	adds	r2, #1
 80036ec:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80036ee:	4b03      	ldr	r3, [pc, #12]	@ (80036fc <pvTaskIncrementMutexHeldCount+0x24>)
 80036f0:	681b      	ldr	r3, [r3, #0]
	}
 80036f2:	4618      	mov	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000378 	.word	0x20000378

08003700 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800370a:	4b29      	ldr	r3, [pc, #164]	@ (80037b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003710:	4b28      	ldr	r3, [pc, #160]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fa54 	bl	8001bc4 <uxListRemove>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	2201      	movs	r2, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	4b21      	ldr	r3, [pc, #132]	@ (80037b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4013      	ands	r3, r2
 8003736:	4a20      	ldr	r2, [pc, #128]	@ (80037b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003738:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d10a      	bne.n	8003758 <prvAddCurrentTaskToDelayedList+0x58>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003748:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	481a      	ldr	r0, [pc, #104]	@ (80037bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003752:	f7fe f9dc 	bl	8001b0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003756:	e026      	b.n	80037a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003760:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	429a      	cmp	r2, r3
 800376e:	d209      	bcs.n	8003784 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003770:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0f      	ldr	r3, [pc, #60]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe f9e9 	bl	8001b54 <vListInsert>
}
 8003782:	e010      	b.n	80037a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003784:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7fe f9df 	bl	8001b54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003796:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	429a      	cmp	r2, r3
 800379e:	d202      	bcs.n	80037a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80037a0:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6013      	str	r3, [r2, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	2000047c 	.word	0x2000047c
 80037b4:	20000378 	.word	0x20000378
 80037b8:	20000480 	.word	0x20000480
 80037bc:	20000464 	.word	0x20000464
 80037c0:	20000434 	.word	0x20000434
 80037c4:	20000430 	.word	0x20000430
 80037c8:	20000498 	.word	0x20000498

080037cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3b04      	subs	r3, #4
 80037dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3b04      	subs	r3, #4
 80037ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f023 0201 	bic.w	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3b04      	subs	r3, #4
 80037fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037fc:	4a08      	ldr	r2, [pc, #32]	@ (8003820 <pxPortInitialiseStack+0x54>)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3b14      	subs	r3, #20
 8003806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3b20      	subs	r3, #32
 8003812:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	08003825 	.word	0x08003825

08003824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800382e:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <prvTaskExitError+0x54>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d00b      	beq.n	8003850 <prvTaskExitError+0x2c>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	60fb      	str	r3, [r7, #12]
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <prvTaskExitError+0x28>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	60bb      	str	r3, [r7, #8]
}
 8003862:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003864:	bf00      	nop
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0fc      	beq.n	8003866 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	2000000c 	.word	0x2000000c
 800387c:	00000000 	.word	0x00000000

08003880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003880:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <pxCurrentTCBConst2>)
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	6808      	ldr	r0, [r1, #0]
 8003886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800388a:	f380 8809 	msr	PSP, r0
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f380 8811 	msr	BASEPRI, r0
 800389a:	f04e 0e0d 	orr.w	lr, lr, #13
 800389e:	4770      	bx	lr

080038a0 <pxCurrentTCBConst2>:
 80038a0:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop

080038a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80038a8:	4806      	ldr	r0, [pc, #24]	@ (80038c4 <prvPortStartFirstTask+0x1c>)
 80038aa:	6800      	ldr	r0, [r0, #0]
 80038ac:	6800      	ldr	r0, [r0, #0]
 80038ae:	f380 8808 	msr	MSP, r0
 80038b2:	b662      	cpsie	i
 80038b4:	b661      	cpsie	f
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	df00      	svc	0
 80038c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038c2:	bf00      	nop
 80038c4:	e000ed08 	.word	0xe000ed08

080038c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038ce:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <xPortStartScheduler+0xd0>)
 80038d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	22ff      	movs	r2, #255	@ 0xff
 80038de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4b2a      	ldr	r3, [pc, #168]	@ (800399c <xPortStartScheduler+0xd4>)
 80038f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038f6:	4b2a      	ldr	r3, [pc, #168]	@ (80039a0 <xPortStartScheduler+0xd8>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038fc:	e009      	b.n	8003912 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80038fe:	4b28      	ldr	r3, [pc, #160]	@ (80039a0 <xPortStartScheduler+0xd8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3b01      	subs	r3, #1
 8003904:	4a26      	ldr	r2, [pc, #152]	@ (80039a0 <xPortStartScheduler+0xd8>)
 8003906:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	b2db      	uxtb	r3, r3
 8003910:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391a:	2b80      	cmp	r3, #128	@ 0x80
 800391c:	d0ef      	beq.n	80038fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800391e:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <xPortStartScheduler+0xd8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1c3 0307 	rsb	r3, r3, #7
 8003926:	2b04      	cmp	r3, #4
 8003928:	d00b      	beq.n	8003942 <xPortStartScheduler+0x7a>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	60bb      	str	r3, [r7, #8]
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	e7fd      	b.n	800393e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003942:	4b17      	ldr	r3, [pc, #92]	@ (80039a0 <xPortStartScheduler+0xd8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <xPortStartScheduler+0xd8>)
 800394a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800394c:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <xPortStartScheduler+0xd8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003954:	4a12      	ldr	r2, [pc, #72]	@ (80039a0 <xPortStartScheduler+0xd8>)
 8003956:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003960:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <xPortStartScheduler+0xdc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0f      	ldr	r2, [pc, #60]	@ (80039a4 <xPortStartScheduler+0xdc>)
 8003966:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800396a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800396c:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <xPortStartScheduler+0xdc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0c      	ldr	r2, [pc, #48]	@ (80039a4 <xPortStartScheduler+0xdc>)
 8003972:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003976:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003978:	f000 f8b8 	bl	8003aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800397c:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <xPortStartScheduler+0xe0>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003982:	f7ff ff91 	bl	80038a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003986:	f7ff fa87 	bl	8002e98 <vTaskSwitchContext>
	prvTaskExitError();
 800398a:	f7ff ff4b 	bl	8003824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	e000e400 	.word	0xe000e400
 800399c:	200004a4 	.word	0x200004a4
 80039a0:	200004a8 	.word	0x200004a8
 80039a4:	e000ed20 	.word	0xe000ed20
 80039a8:	2000000c 	.word	0x2000000c

080039ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	607b      	str	r3, [r7, #4]
}
 80039c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80039c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <vPortEnterCritical+0x58>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a04 <vPortEnterCritical+0x58>)
 80039ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80039d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <vPortEnterCritical+0x58>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d110      	bne.n	80039fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <vPortEnterCritical+0x5c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <vPortEnterCritical+0x4e>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	603b      	str	r3, [r7, #0]
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	e7fd      	b.n	80039f6 <vPortEnterCritical+0x4a>
	}
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	2000000c 	.word	0x2000000c
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a12:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <vPortExitCritical+0x50>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <vPortExitCritical+0x26>
	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	607b      	str	r3, [r7, #4]
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	e7fd      	b.n	8003a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <vPortExitCritical+0x50>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	4a08      	ldr	r2, [pc, #32]	@ (8003a5c <vPortExitCritical+0x50>)
 8003a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a3c:	4b07      	ldr	r3, [pc, #28]	@ (8003a5c <vPortExitCritical+0x50>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <vPortExitCritical+0x44>
 8003a44:	2300      	movs	r3, #0
 8003a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f383 8811 	msr	BASEPRI, r3
}
 8003a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	2000000c 	.word	0x2000000c

08003a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a60:	f3ef 8009 	mrs	r0, PSP
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <pxCurrentTCBConst>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a70:	6010      	str	r0, [r2, #0]
 8003a72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a76:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003a7a:	f380 8811 	msr	BASEPRI, r0
 8003a7e:	f7ff fa0b 	bl	8002e98 <vTaskSwitchContext>
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f380 8811 	msr	BASEPRI, r0
 8003a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	6808      	ldr	r0, [r1, #0]
 8003a92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a96:	f380 8809 	msr	PSP, r0
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	4770      	bx	lr

08003aa0 <pxCurrentTCBConst>:
 8003aa0:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop

08003aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	607b      	str	r3, [r7, #4]
}
 8003ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ac2:	f7ff f92b 	bl	8002d1c <xTaskIncrementTick>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003acc:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <SysTick_Handler+0x40>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f383 8811 	msr	BASEPRI, r3
}
 8003ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <vPortSetupTimerInterrupt+0x30>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003af6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <vPortSetupTimerInterrupt+0x34>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <vPortSetupTimerInterrupt+0x38>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a09      	ldr	r2, [pc, #36]	@ (8003b28 <vPortSetupTimerInterrupt+0x3c>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	4a08      	ldr	r2, [pc, #32]	@ (8003b2c <vPortSetupTimerInterrupt+0x40>)
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b0e:	4b03      	ldr	r3, [pc, #12]	@ (8003b1c <vPortSetupTimerInterrupt+0x30>)
 8003b10:	2207      	movs	r2, #7
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	e000e010 	.word	0xe000e010
 8003b20:	e000e018 	.word	0xe000e018
 8003b24:	20000000 	.word	0x20000000
 8003b28:	10624dd3 	.word	0x10624dd3
 8003b2c:	e000e014 	.word	0xe000e014

08003b30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b36:	f3ef 8305 	mrs	r3, IPSR
 8003b3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	d915      	bls.n	8003b6e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b42:	4a17      	ldr	r2, [pc, #92]	@ (8003ba0 <vPortValidateInterruptPriority+0x70>)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b4c:	4b15      	ldr	r3, [pc, #84]	@ (8003ba4 <vPortValidateInterruptPriority+0x74>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	7afa      	ldrb	r2, [r7, #11]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d20b      	bcs.n	8003b6e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	607b      	str	r3, [r7, #4]
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	e7fd      	b.n	8003b6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <vPortValidateInterruptPriority+0x78>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <vPortValidateInterruptPriority+0x7c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d90b      	bls.n	8003b96 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	603b      	str	r3, [r7, #0]
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	e7fd      	b.n	8003b92 <vPortValidateInterruptPriority+0x62>
	}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	e000e3f0 	.word	0xe000e3f0
 8003ba4:	200004a4 	.word	0x200004a4
 8003ba8:	e000ed0c 	.word	0xe000ed0c
 8003bac:	200004a8 	.word	0x200004a8

08003bb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	@ 0x28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003bbc:	f7ff f802 	bl	8002bc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d2c <pvPortMalloc+0x17c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003bc8:	f000 f916 	bl	8003df8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bcc:	4b58      	ldr	r3, [pc, #352]	@ (8003d30 <pvPortMalloc+0x180>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 8090 	bne.w	8003cfa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01e      	beq.n	8003c1e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003be0:	2208      	movs	r2, #8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d015      	beq.n	8003c1e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f023 0307 	bic.w	r3, r3, #7
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <pvPortMalloc+0x6e>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	617b      	str	r3, [r7, #20]
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	e7fd      	b.n	8003c1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d06a      	beq.n	8003cfa <pvPortMalloc+0x14a>
 8003c24:	4b43      	ldr	r3, [pc, #268]	@ (8003d34 <pvPortMalloc+0x184>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d865      	bhi.n	8003cfa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c2e:	4b42      	ldr	r3, [pc, #264]	@ (8003d38 <pvPortMalloc+0x188>)
 8003c30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c32:	4b41      	ldr	r3, [pc, #260]	@ (8003d38 <pvPortMalloc+0x188>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c38:	e004      	b.n	8003c44 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d903      	bls.n	8003c56 <pvPortMalloc+0xa6>
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f1      	bne.n	8003c3a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c56:	4b35      	ldr	r3, [pc, #212]	@ (8003d2c <pvPortMalloc+0x17c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d04c      	beq.n	8003cfa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2208      	movs	r2, #8
 8003c66:	4413      	add	r3, r2
 8003c68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	1ad2      	subs	r2, r2, r3
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d920      	bls.n	8003cc4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <pvPortMalloc+0xfc>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	613b      	str	r3, [r7, #16]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cbe:	69b8      	ldr	r0, [r7, #24]
 8003cc0:	f000 f8fc 	bl	8003ebc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <pvPortMalloc+0x184>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	4a19      	ldr	r2, [pc, #100]	@ (8003d34 <pvPortMalloc+0x184>)
 8003cd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cd2:	4b18      	ldr	r3, [pc, #96]	@ (8003d34 <pvPortMalloc+0x184>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b19      	ldr	r3, [pc, #100]	@ (8003d3c <pvPortMalloc+0x18c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d203      	bcs.n	8003ce6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003cde:	4b15      	ldr	r3, [pc, #84]	@ (8003d34 <pvPortMalloc+0x184>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <pvPortMalloc+0x18c>)
 8003ce4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <pvPortMalloc+0x180>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003cfa:	f7fe ff71 	bl	8002be0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <pvPortMalloc+0x170>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	60fb      	str	r3, [r7, #12]
}
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <pvPortMalloc+0x16c>
	return pvReturn;
 8003d20:	69fb      	ldr	r3, [r7, #28]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3728      	adds	r7, #40	@ 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200010b4 	.word	0x200010b4
 8003d30:	200010c0 	.word	0x200010c0
 8003d34:	200010b8 	.word	0x200010b8
 8003d38:	200010ac 	.word	0x200010ac
 8003d3c:	200010bc 	.word	0x200010bc

08003d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d04a      	beq.n	8003de8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d52:	2308      	movs	r3, #8
 8003d54:	425b      	negs	r3, r3
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4413      	add	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	4b22      	ldr	r3, [pc, #136]	@ (8003df0 <vPortFree+0xb0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <vPortFree+0x46>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	60fb      	str	r3, [r7, #12]
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	e7fd      	b.n	8003d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <vPortFree+0x66>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	60bb      	str	r3, [r7, #8]
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	e7fd      	b.n	8003da2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <vPortFree+0xb0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d019      	beq.n	8003de8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d115      	bne.n	8003de8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <vPortFree+0xb0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003dcc:	f7fe fefa 	bl	8002bc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	4b07      	ldr	r3, [pc, #28]	@ (8003df4 <vPortFree+0xb4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4413      	add	r3, r2
 8003dda:	4a06      	ldr	r2, [pc, #24]	@ (8003df4 <vPortFree+0xb4>)
 8003ddc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003dde:	6938      	ldr	r0, [r7, #16]
 8003de0:	f000 f86c 	bl	8003ebc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003de4:	f7fe fefc 	bl	8002be0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003de8:	bf00      	nop
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	200010c0 	.word	0x200010c0
 8003df4:	200010b8 	.word	0x200010b8

08003df8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003dfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003e02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e04:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <prvHeapInit+0xac>)
 8003e06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3307      	adds	r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0307 	bic.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea4 <prvHeapInit+0xac>)
 8003e28:	4413      	add	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea8 <prvHeapInit+0xb0>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea8 <prvHeapInit+0xb0>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	4413      	add	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e44:	2208      	movs	r2, #8
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0307 	bic.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a15      	ldr	r2, [pc, #84]	@ (8003eac <prvHeapInit+0xb4>)
 8003e58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e5a:	4b14      	ldr	r3, [pc, #80]	@ (8003eac <prvHeapInit+0xb4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e62:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <prvHeapInit+0xb4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e78:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <prvHeapInit+0xb4>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb0 <prvHeapInit+0xb8>)
 8003e86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a09      	ldr	r2, [pc, #36]	@ (8003eb4 <prvHeapInit+0xbc>)
 8003e8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e90:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <prvHeapInit+0xc0>)
 8003e92:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003e96:	601a      	str	r2, [r3, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	200004ac 	.word	0x200004ac
 8003ea8:	200010ac 	.word	0x200010ac
 8003eac:	200010b4 	.word	0x200010b4
 8003eb0:	200010bc 	.word	0x200010bc
 8003eb4:	200010b8 	.word	0x200010b8
 8003eb8:	200010c0 	.word	0x200010c0

08003ebc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ec4:	4b27      	ldr	r3, [pc, #156]	@ (8003f64 <prvInsertBlockIntoFreeList+0xa8>)
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e002      	b.n	8003ed0 <prvInsertBlockIntoFreeList+0x14>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d8f7      	bhi.n	8003eca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d108      	bne.n	8003efe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	441a      	add	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	441a      	add	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d118      	bne.n	8003f44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b14      	ldr	r3, [pc, #80]	@ (8003f68 <prvInsertBlockIntoFreeList+0xac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d00d      	beq.n	8003f3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e008      	b.n	8003f4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <prvInsertBlockIntoFreeList+0xac>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e003      	b.n	8003f4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d002      	beq.n	8003f5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	200010ac 	.word	0x200010ac
 8003f68:	200010b4 	.word	0x200010b4

08003f6c <memset>:
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4402      	add	r2, r0
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d100      	bne.n	8003f76 <memset+0xa>
 8003f74:	4770      	bx	lr
 8003f76:	f803 1b01 	strb.w	r1, [r3], #1
 8003f7a:	e7f9      	b.n	8003f70 <memset+0x4>

08003f7c <_reclaim_reent>:
 8003f7c:	4b29      	ldr	r3, [pc, #164]	@ (8004024 <_reclaim_reent+0xa8>)
 8003f7e:	b570      	push	{r4, r5, r6, lr}
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4604      	mov	r4, r0
 8003f84:	4283      	cmp	r3, r0
 8003f86:	d04b      	beq.n	8004020 <_reclaim_reent+0xa4>
 8003f88:	69c3      	ldr	r3, [r0, #28]
 8003f8a:	b1ab      	cbz	r3, 8003fb8 <_reclaim_reent+0x3c>
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	b16b      	cbz	r3, 8003fac <_reclaim_reent+0x30>
 8003f90:	2500      	movs	r5, #0
 8003f92:	69e3      	ldr	r3, [r4, #28]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	5959      	ldr	r1, [r3, r5]
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	d13b      	bne.n	8004014 <_reclaim_reent+0x98>
 8003f9c:	3504      	adds	r5, #4
 8003f9e:	2d80      	cmp	r5, #128	@ 0x80
 8003fa0:	d1f7      	bne.n	8003f92 <_reclaim_reent+0x16>
 8003fa2:	69e3      	ldr	r3, [r4, #28]
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	68d9      	ldr	r1, [r3, #12]
 8003fa8:	f000 f872 	bl	8004090 <_free_r>
 8003fac:	69e3      	ldr	r3, [r4, #28]
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	b111      	cbz	r1, 8003fb8 <_reclaim_reent+0x3c>
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f000 f86c 	bl	8004090 <_free_r>
 8003fb8:	6961      	ldr	r1, [r4, #20]
 8003fba:	b111      	cbz	r1, 8003fc2 <_reclaim_reent+0x46>
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f000 f867 	bl	8004090 <_free_r>
 8003fc2:	69e1      	ldr	r1, [r4, #28]
 8003fc4:	b111      	cbz	r1, 8003fcc <_reclaim_reent+0x50>
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f000 f862 	bl	8004090 <_free_r>
 8003fcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003fce:	b111      	cbz	r1, 8003fd6 <_reclaim_reent+0x5a>
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f000 f85d 	bl	8004090 <_free_r>
 8003fd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fd8:	b111      	cbz	r1, 8003fe0 <_reclaim_reent+0x64>
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f000 f858 	bl	8004090 <_free_r>
 8003fe0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003fe2:	b111      	cbz	r1, 8003fea <_reclaim_reent+0x6e>
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f000 f853 	bl	8004090 <_free_r>
 8003fea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003fec:	b111      	cbz	r1, 8003ff4 <_reclaim_reent+0x78>
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f000 f84e 	bl	8004090 <_free_r>
 8003ff4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003ff6:	b111      	cbz	r1, 8003ffe <_reclaim_reent+0x82>
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f000 f849 	bl	8004090 <_free_r>
 8003ffe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004000:	b111      	cbz	r1, 8004008 <_reclaim_reent+0x8c>
 8004002:	4620      	mov	r0, r4
 8004004:	f000 f844 	bl	8004090 <_free_r>
 8004008:	6a23      	ldr	r3, [r4, #32]
 800400a:	b14b      	cbz	r3, 8004020 <_reclaim_reent+0xa4>
 800400c:	4620      	mov	r0, r4
 800400e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004012:	4718      	bx	r3
 8004014:	680e      	ldr	r6, [r1, #0]
 8004016:	4620      	mov	r0, r4
 8004018:	f000 f83a 	bl	8004090 <_free_r>
 800401c:	4631      	mov	r1, r6
 800401e:	e7bb      	b.n	8003f98 <_reclaim_reent+0x1c>
 8004020:	bd70      	pop	{r4, r5, r6, pc}
 8004022:	bf00      	nop
 8004024:	20000010 	.word	0x20000010

08004028 <__libc_init_array>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	2600      	movs	r6, #0
 800402c:	4d0c      	ldr	r5, [pc, #48]	@ (8004060 <__libc_init_array+0x38>)
 800402e:	4c0d      	ldr	r4, [pc, #52]	@ (8004064 <__libc_init_array+0x3c>)
 8004030:	1b64      	subs	r4, r4, r5
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	42a6      	cmp	r6, r4
 8004036:	d109      	bne.n	800404c <__libc_init_array+0x24>
 8004038:	f000 f87e 	bl	8004138 <_init>
 800403c:	2600      	movs	r6, #0
 800403e:	4d0a      	ldr	r5, [pc, #40]	@ (8004068 <__libc_init_array+0x40>)
 8004040:	4c0a      	ldr	r4, [pc, #40]	@ (800406c <__libc_init_array+0x44>)
 8004042:	1b64      	subs	r4, r4, r5
 8004044:	10a4      	asrs	r4, r4, #2
 8004046:	42a6      	cmp	r6, r4
 8004048:	d105      	bne.n	8004056 <__libc_init_array+0x2e>
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004050:	4798      	blx	r3
 8004052:	3601      	adds	r6, #1
 8004054:	e7ee      	b.n	8004034 <__libc_init_array+0xc>
 8004056:	f855 3b04 	ldr.w	r3, [r5], #4
 800405a:	4798      	blx	r3
 800405c:	3601      	adds	r6, #1
 800405e:	e7f2      	b.n	8004046 <__libc_init_array+0x1e>
 8004060:	080041f4 	.word	0x080041f4
 8004064:	080041f4 	.word	0x080041f4
 8004068:	080041f4 	.word	0x080041f4
 800406c:	080041f8 	.word	0x080041f8

08004070 <__retarget_lock_acquire_recursive>:
 8004070:	4770      	bx	lr

08004072 <__retarget_lock_release_recursive>:
 8004072:	4770      	bx	lr

08004074 <memcpy>:
 8004074:	440a      	add	r2, r1
 8004076:	4291      	cmp	r1, r2
 8004078:	f100 33ff 	add.w	r3, r0, #4294967295
 800407c:	d100      	bne.n	8004080 <memcpy+0xc>
 800407e:	4770      	bx	lr
 8004080:	b510      	push	{r4, lr}
 8004082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004086:	4291      	cmp	r1, r2
 8004088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800408c:	d1f9      	bne.n	8004082 <memcpy+0xe>
 800408e:	bd10      	pop	{r4, pc}

08004090 <_free_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4605      	mov	r5, r0
 8004094:	2900      	cmp	r1, #0
 8004096:	d040      	beq.n	800411a <_free_r+0x8a>
 8004098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800409c:	1f0c      	subs	r4, r1, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bfb8      	it	lt
 80040a2:	18e4      	addlt	r4, r4, r3
 80040a4:	f000 f83c 	bl	8004120 <__malloc_lock>
 80040a8:	4a1c      	ldr	r2, [pc, #112]	@ (800411c <_free_r+0x8c>)
 80040aa:	6813      	ldr	r3, [r2, #0]
 80040ac:	b933      	cbnz	r3, 80040bc <_free_r+0x2c>
 80040ae:	6063      	str	r3, [r4, #4]
 80040b0:	6014      	str	r4, [r2, #0]
 80040b2:	4628      	mov	r0, r5
 80040b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040b8:	f000 b838 	b.w	800412c <__malloc_unlock>
 80040bc:	42a3      	cmp	r3, r4
 80040be:	d908      	bls.n	80040d2 <_free_r+0x42>
 80040c0:	6820      	ldr	r0, [r4, #0]
 80040c2:	1821      	adds	r1, r4, r0
 80040c4:	428b      	cmp	r3, r1
 80040c6:	bf01      	itttt	eq
 80040c8:	6819      	ldreq	r1, [r3, #0]
 80040ca:	685b      	ldreq	r3, [r3, #4]
 80040cc:	1809      	addeq	r1, r1, r0
 80040ce:	6021      	streq	r1, [r4, #0]
 80040d0:	e7ed      	b.n	80040ae <_free_r+0x1e>
 80040d2:	461a      	mov	r2, r3
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	b10b      	cbz	r3, 80040dc <_free_r+0x4c>
 80040d8:	42a3      	cmp	r3, r4
 80040da:	d9fa      	bls.n	80040d2 <_free_r+0x42>
 80040dc:	6811      	ldr	r1, [r2, #0]
 80040de:	1850      	adds	r0, r2, r1
 80040e0:	42a0      	cmp	r0, r4
 80040e2:	d10b      	bne.n	80040fc <_free_r+0x6c>
 80040e4:	6820      	ldr	r0, [r4, #0]
 80040e6:	4401      	add	r1, r0
 80040e8:	1850      	adds	r0, r2, r1
 80040ea:	4283      	cmp	r3, r0
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	d1e0      	bne.n	80040b2 <_free_r+0x22>
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4408      	add	r0, r1
 80040f6:	6010      	str	r0, [r2, #0]
 80040f8:	6053      	str	r3, [r2, #4]
 80040fa:	e7da      	b.n	80040b2 <_free_r+0x22>
 80040fc:	d902      	bls.n	8004104 <_free_r+0x74>
 80040fe:	230c      	movs	r3, #12
 8004100:	602b      	str	r3, [r5, #0]
 8004102:	e7d6      	b.n	80040b2 <_free_r+0x22>
 8004104:	6820      	ldr	r0, [r4, #0]
 8004106:	1821      	adds	r1, r4, r0
 8004108:	428b      	cmp	r3, r1
 800410a:	bf01      	itttt	eq
 800410c:	6819      	ldreq	r1, [r3, #0]
 800410e:	685b      	ldreq	r3, [r3, #4]
 8004110:	1809      	addeq	r1, r1, r0
 8004112:	6021      	streq	r1, [r4, #0]
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	6054      	str	r4, [r2, #4]
 8004118:	e7cb      	b.n	80040b2 <_free_r+0x22>
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	20001200 	.word	0x20001200

08004120 <__malloc_lock>:
 8004120:	4801      	ldr	r0, [pc, #4]	@ (8004128 <__malloc_lock+0x8>)
 8004122:	f7ff bfa5 	b.w	8004070 <__retarget_lock_acquire_recursive>
 8004126:	bf00      	nop
 8004128:	200011fc 	.word	0x200011fc

0800412c <__malloc_unlock>:
 800412c:	4801      	ldr	r0, [pc, #4]	@ (8004134 <__malloc_unlock+0x8>)
 800412e:	f7ff bfa0 	b.w	8004072 <__retarget_lock_release_recursive>
 8004132:	bf00      	nop
 8004134:	200011fc 	.word	0x200011fc

08004138 <_init>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr

08004144 <_fini>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr
