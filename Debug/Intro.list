
Intro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003204  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003314  08003314  00004314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  080033d0  080033d0  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d0  080033d0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d0  080033d0  000043d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033d4  080033d4  000043d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080033d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  20000060  08003438  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001208  08003438  00005208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f953  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029de  00000000  00000000  000149dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000173c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7e  00000000  00000000  000182b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018622  00000000  00000000  00018e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e13  00000000  00000000  00031458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de41  00000000  00000000  0004226b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d00ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004018  00000000  00000000  000d00f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d4108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080032fc 	.word	0x080032fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080032fc 	.word	0x080032fc

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09a      	sub	sp, #104	@ 0x68
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa37 	bl	80005f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f85d 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f89d 	bl	80002cc <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of msg_queue */
  osMessageQDef(msg_queue, 5, uint32_t);
 8000192:	4b25      	ldr	r3, [pc, #148]	@ (8000228 <main+0xa8>)
 8000194:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800019a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msg_queueHandle = osMessageCreate(osMessageQ(msg_queue), NULL);
 800019e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80001a2:	2100      	movs	r1, #0
 80001a4:	4618      	mov	r0, r3
 80001a6:	f001 fbcb 	bl	8001940 <osMessageCreate>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a1f      	ldr	r2, [pc, #124]	@ (800022c <main+0xac>)
 80001ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000230 <main+0xb0>)
 80001b2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001b6:	461d      	mov	r5, r3
 80001b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f001 fb58 	bl	8001880 <osThreadCreate>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4a18      	ldr	r2, [pc, #96]	@ (8000234 <main+0xb4>)
 80001d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of usedTask1 */
  osThreadDef(usedTask1, used_task1, osPriorityNormal, 0, 128);
 80001d6:	4b18      	ldr	r3, [pc, #96]	@ (8000238 <main+0xb8>)
 80001d8:	f107 0420 	add.w	r4, r7, #32
 80001dc:	461d      	mov	r5, r3
 80001de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usedTask1Handle = osThreadCreate(osThread(usedTask1), NULL);
 80001ea:	f107 0320 	add.w	r3, r7, #32
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fb45 	bl	8001880 <osThreadCreate>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a10      	ldr	r2, [pc, #64]	@ (800023c <main+0xbc>)
 80001fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of usedTask2 */
  osThreadDef(usedTask2, used_task2, osPriorityNormal, 0, 128);
 80001fc:	4b10      	ldr	r3, [pc, #64]	@ (8000240 <main+0xc0>)
 80001fe:	1d3c      	adds	r4, r7, #4
 8000200:	461d      	mov	r5, r3
 8000202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usedTask2Handle = osThreadCreate(osThread(usedTask2), NULL);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fb34 	bl	8001880 <osThreadCreate>
 8000218:	4603      	mov	r3, r0
 800021a:	4a0a      	ldr	r2, [pc, #40]	@ (8000244 <main+0xc4>)
 800021c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800021e:	f001 fb28 	bl	8001872 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000222:	bf00      	nop
 8000224:	e7fd      	b.n	8000222 <main+0xa2>
 8000226:	bf00      	nop
 8000228:	08003314 	.word	0x08003314
 800022c:	20000328 	.word	0x20000328
 8000230:	08003330 	.word	0x08003330
 8000234:	2000031c 	.word	0x2000031c
 8000238:	08003358 	.word	0x08003358
 800023c:	20000320 	.word	0x20000320
 8000240:	08003380 	.word	0x08003380
 8000244:	20000324 	.word	0x20000324

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	@ 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	@ 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 ff78 	bl	800314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800027a:	2300      	movs	r3, #0
 800027c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fc75 	bl	8000b78 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000294:	f000 f8a4 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fee2 	bl	800107c <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002be:	f000 f88f 	bl	80003e0 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	@ 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <MX_GPIO_Init+0x74>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a16      	ldr	r2, [pc, #88]	@ (8000340 <MX_GPIO_Init+0x74>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <MX_GPIO_Init+0x74>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <MX_GPIO_Init+0x74>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a10      	ldr	r2, [pc, #64]	@ (8000340 <MX_GPIO_Init+0x74>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_GPIO_Init+0x74>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2104      	movs	r1, #4
 8000314:	480b      	ldr	r0, [pc, #44]	@ (8000344 <MX_GPIO_Init+0x78>)
 8000316:	f000 fbfd 	bl	8000b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Status_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 800031a:	2304      	movs	r3, #4
 800031c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	@ (8000344 <MX_GPIO_Init+0x78>)
 8000332:	f000 fa73 	bl	800081c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40010c00 	.word	0x40010c00

08000348 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f001 fae1 	bl	8001918 <osDelay>
 8000356:	e7fb      	b.n	8000350 <StartDefaultTask+0x8>

08000358 <used_task1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_used_task1 */
void used_task1(void const * argument)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN used_task1 */
  /* Infinite loop */
  for(;;)
  {
	  suspendCount++;
 8000360:	4b0b      	ldr	r3, [pc, #44]	@ (8000390 <used_task1+0x38>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <used_task1+0x38>)
 800036a:	701a      	strb	r2, [r3, #0]
	  if (suspendCount == 10)
 800036c:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <used_task1+0x38>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b0a      	cmp	r3, #10
 8000372:	d107      	bne.n	8000384 <used_task1+0x2c>
	  {
		  osThreadSuspend(usedTask2Handle);
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <used_task1+0x3c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f001 fb09 	bl	8001990 <osThreadSuspend>
		  isSuspended = true;
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <used_task1+0x40>)
 8000380:	2201      	movs	r2, #1
 8000382:	701a      	strb	r2, [r3, #0]
//	  if (isSuspended)
//	  {
//		  osThreadResume(usedTask2Handle);
//		  isSuspended = false;
//	  }
	  osDelay(1000);
 8000384:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000388:	f001 fac6 	bl	8001918 <osDelay>
	  suspendCount++;
 800038c:	e7e8      	b.n	8000360 <used_task1+0x8>
 800038e:	bf00      	nop
 8000390:	2000032c 	.word	0x2000032c
 8000394:	20000324 	.word	0x20000324
 8000398:	2000032d 	.word	0x2000032d

0800039c <used_task2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_used_task2 */
void used_task2(void const * argument)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN used_task2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80003a4:	2104      	movs	r1, #4
 80003a6:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <used_task2+0x1c>)
 80003a8:	f000 fbcc 	bl	8000b44 <HAL_GPIO_TogglePin>
	  osDelay(300);
 80003ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80003b0:	f001 fab2 	bl	8001918 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80003b4:	bf00      	nop
 80003b6:	e7f5      	b.n	80003a4 <used_task2+0x8>
 80003b8:	40010c00 	.word	0x40010c00

080003bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d101      	bne.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ce:	f000 f929 	bl	8000624 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40000400 	.word	0x40000400

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <Error_Handler+0x8>

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f2:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <HAL_MspInit+0x68>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a17      	ldr	r2, [pc, #92]	@ (8000454 <HAL_MspInit+0x68>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <HAL_MspInit+0x68>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <HAL_MspInit+0x68>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a11      	ldr	r2, [pc, #68]	@ (8000454 <HAL_MspInit+0x68>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <HAL_MspInit+0x68>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	210f      	movs	r1, #15
 8000426:	f06f 0001 	mvn.w	r0, #1
 800042a:	f000 f9cc 	bl	80007c6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <HAL_MspInit+0x6c>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <HAL_MspInit+0x6c>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08e      	sub	sp, #56	@ 0x38
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000464:	2300      	movs	r3, #0
 8000466:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000468:	2300      	movs	r3, #0
 800046a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800046c:	2300      	movs	r3, #0
 800046e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000472:	4b34      	ldr	r3, [pc, #208]	@ (8000544 <HAL_InitTick+0xe8>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a33      	ldr	r2, [pc, #204]	@ (8000544 <HAL_InitTick+0xe8>)
 8000478:	f043 0302 	orr.w	r3, r3, #2
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b31      	ldr	r3, [pc, #196]	@ (8000544 <HAL_InitTick+0xe8>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 0302 	and.w	r3, r3, #2
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800048a:	f107 0210 	add.w	r2, r7, #16
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4611      	mov	r1, r2
 8000494:	4618      	mov	r0, r3
 8000496:	f000 ff4d 	bl	8001334 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800049a:	6a3b      	ldr	r3, [r7, #32]
 800049c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800049e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d103      	bne.n	80004ac <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004a4:	f000 ff32 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 80004a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80004aa:	e004      	b.n	80004b6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004ac:	f000 ff2e 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 80004b0:	4603      	mov	r3, r0
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004b8:	4a23      	ldr	r2, [pc, #140]	@ (8000548 <HAL_InitTick+0xec>)
 80004ba:	fba2 2303 	umull	r2, r3, r2, r3
 80004be:	0c9b      	lsrs	r3, r3, #18
 80004c0:	3b01      	subs	r3, #1
 80004c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80004c4:	4b21      	ldr	r3, [pc, #132]	@ (800054c <HAL_InitTick+0xf0>)
 80004c6:	4a22      	ldr	r2, [pc, #136]	@ (8000550 <HAL_InitTick+0xf4>)
 80004c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80004ca:	4b20      	ldr	r3, [pc, #128]	@ (800054c <HAL_InitTick+0xf0>)
 80004cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004d0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80004d2:	4a1e      	ldr	r2, [pc, #120]	@ (800054c <HAL_InitTick+0xf0>)
 80004d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004d6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80004d8:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <HAL_InitTick+0xf0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004de:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <HAL_InitTick+0xf0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e4:	4b19      	ldr	r3, [pc, #100]	@ (800054c <HAL_InitTick+0xf0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80004ea:	4818      	ldr	r0, [pc, #96]	@ (800054c <HAL_InitTick+0xf0>)
 80004ec:	f000 ff70 	bl	80013d0 <HAL_TIM_Base_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80004f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d11b      	bne.n	8000536 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80004fe:	4813      	ldr	r0, [pc, #76]	@ (800054c <HAL_InitTick+0xf0>)
 8000500:	f000 ffbe 	bl	8001480 <HAL_TIM_Base_Start_IT>
 8000504:	4603      	mov	r3, r0
 8000506:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800050a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800050e:	2b00      	cmp	r3, #0
 8000510:	d111      	bne.n	8000536 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000512:	201d      	movs	r0, #29
 8000514:	f000 f973 	bl	80007fe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b0f      	cmp	r3, #15
 800051c:	d808      	bhi.n	8000530 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800051e:	2200      	movs	r2, #0
 8000520:	6879      	ldr	r1, [r7, #4]
 8000522:	201d      	movs	r0, #29
 8000524:	f000 f94f 	bl	80007c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000528:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <HAL_InitTick+0xf8>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	e002      	b.n	8000536 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000536:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800053a:	4618      	mov	r0, r3
 800053c:	3738      	adds	r7, #56	@ 0x38
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000
 8000548:	431bde83 	.word	0x431bde83
 800054c:	20000330 	.word	0x20000330
 8000550:	40000400 	.word	0x40000400
 8000554:	20000004 	.word	0x20000004

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <NMI_Handler+0x4>

08000560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <MemManage_Handler+0x4>

08000570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <UsageFault_Handler+0x4>

08000580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000590:	4802      	ldr	r0, [pc, #8]	@ (800059c <TIM3_IRQHandler+0x10>)
 8000592:	f000 ffc1 	bl	8001518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000330 	.word	0x20000330

080005a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ac:	f7ff fff8 	bl	80005a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005b2:	490c      	ldr	r1, [pc, #48]	@ (80005e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005b4:	4a0c      	ldr	r2, [pc, #48]	@ (80005e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a09      	ldr	r2, [pc, #36]	@ (80005ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c8:	4c09      	ldr	r4, [pc, #36]	@ (80005f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d6:	f002 fe17 	bl	8003208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff fdd1 	bl	8000180 <main>
  bx lr
 80005de:	4770      	bx	lr
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005e8:	080033d8 	.word	0x080033d8
  ldr r2, =_sbss
 80005ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005f0:	20001208 	.word	0x20001208

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <HAL_Init+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a07      	ldr	r2, [pc, #28]	@ (8000620 <HAL_Init+0x28>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f8d1 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060e:	200f      	movs	r0, #15
 8000610:	f7ff ff24 	bl	800045c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000614:	f7ff feea 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40022000 	.word	0x40022000

08000624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <HAL_IncTick+0x1c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <HAL_IncTick+0x20>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <HAL_IncTick+0x20>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	20000008 	.word	0x20000008
 8000644:	20000378 	.word	0x20000378

08000648 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b02      	ldr	r3, [pc, #8]	@ (8000658 <HAL_GetTick+0x10>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000378 	.word	0x20000378

0800065c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <__NVIC_SetPriorityGrouping+0x44>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800068c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068e:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	60d3      	str	r3, [r2, #12]
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <__NVIC_GetPriorityGrouping+0x18>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	0a1b      	lsrs	r3, r3, #8
 80006ae:	f003 0307 	and.w	r3, r3, #7
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	db0b      	blt.n	80006ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 021f 	and.w	r2, r3, #31
 80006d8:	4906      	ldr	r1, [pc, #24]	@ (80006f4 <__NVIC_EnableIRQ+0x34>)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	095b      	lsrs	r3, r3, #5
 80006e0:	2001      	movs	r0, #1
 80006e2:	fa00 f202 	lsl.w	r2, r0, r2
 80006e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	@ (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	@ (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	@ 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	@ 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff4f 	bl	800065c <__NVIC_SetPriorityGrouping>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d8:	f7ff ff64 	bl	80006a4 <__NVIC_GetPriorityGrouping>
 80007dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	6978      	ldr	r0, [r7, #20]
 80007e4:	f7ff ffb2 	bl	800074c <NVIC_EncodePriority>
 80007e8:	4602      	mov	r2, r0
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff81 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff57 	bl	80006c0 <__NVIC_EnableIRQ>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b08b      	sub	sp, #44	@ 0x2c
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082e:	e161      	b.n	8000af4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000830:	2201      	movs	r2, #1
 8000832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	4013      	ands	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 8150 	bne.w	8000aee <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a97      	ldr	r2, [pc, #604]	@ (8000ab0 <HAL_GPIO_Init+0x294>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d05e      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000858:	4a95      	ldr	r2, [pc, #596]	@ (8000ab0 <HAL_GPIO_Init+0x294>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d875      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800085e:	4a95      	ldr	r2, [pc, #596]	@ (8000ab4 <HAL_GPIO_Init+0x298>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d058      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000864:	4a93      	ldr	r2, [pc, #588]	@ (8000ab4 <HAL_GPIO_Init+0x298>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d86f      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800086a:	4a93      	ldr	r2, [pc, #588]	@ (8000ab8 <HAL_GPIO_Init+0x29c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d052      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000870:	4a91      	ldr	r2, [pc, #580]	@ (8000ab8 <HAL_GPIO_Init+0x29c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d869      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000876:	4a91      	ldr	r2, [pc, #580]	@ (8000abc <HAL_GPIO_Init+0x2a0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d04c      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 800087c:	4a8f      	ldr	r2, [pc, #572]	@ (8000abc <HAL_GPIO_Init+0x2a0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d863      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000882:	4a8f      	ldr	r2, [pc, #572]	@ (8000ac0 <HAL_GPIO_Init+0x2a4>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d046      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000888:	4a8d      	ldr	r2, [pc, #564]	@ (8000ac0 <HAL_GPIO_Init+0x2a4>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d85d      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800088e:	2b12      	cmp	r3, #18
 8000890:	d82a      	bhi.n	80008e8 <HAL_GPIO_Init+0xcc>
 8000892:	2b12      	cmp	r3, #18
 8000894:	d859      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000896:	a201      	add	r2, pc, #4	@ (adr r2, 800089c <HAL_GPIO_Init+0x80>)
 8000898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089c:	08000917 	.word	0x08000917
 80008a0:	080008f1 	.word	0x080008f1
 80008a4:	08000903 	.word	0x08000903
 80008a8:	08000945 	.word	0x08000945
 80008ac:	0800094b 	.word	0x0800094b
 80008b0:	0800094b 	.word	0x0800094b
 80008b4:	0800094b 	.word	0x0800094b
 80008b8:	0800094b 	.word	0x0800094b
 80008bc:	0800094b 	.word	0x0800094b
 80008c0:	0800094b 	.word	0x0800094b
 80008c4:	0800094b 	.word	0x0800094b
 80008c8:	0800094b 	.word	0x0800094b
 80008cc:	0800094b 	.word	0x0800094b
 80008d0:	0800094b 	.word	0x0800094b
 80008d4:	0800094b 	.word	0x0800094b
 80008d8:	0800094b 	.word	0x0800094b
 80008dc:	0800094b 	.word	0x0800094b
 80008e0:	080008f9 	.word	0x080008f9
 80008e4:	0800090d 	.word	0x0800090d
 80008e8:	4a76      	ldr	r2, [pc, #472]	@ (8000ac4 <HAL_GPIO_Init+0x2a8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d013      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ee:	e02c      	b.n	800094a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	623b      	str	r3, [r7, #32]
          break;
 80008f6:	e029      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	3304      	adds	r3, #4
 80008fe:	623b      	str	r3, [r7, #32]
          break;
 8000900:	e024      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	3308      	adds	r3, #8
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e01f      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	330c      	adds	r3, #12
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e01a      	b.n	800094c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800091e:	2304      	movs	r3, #4
 8000920:	623b      	str	r3, [r7, #32]
          break;
 8000922:	e013      	b.n	800094c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d105      	bne.n	8000938 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092c:	2308      	movs	r3, #8
 800092e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	611a      	str	r2, [r3, #16]
          break;
 8000936:	e009      	b.n	800094c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000938:	2308      	movs	r3, #8
 800093a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	615a      	str	r2, [r3, #20]
          break;
 8000942:	e003      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e000      	b.n	800094c <HAL_GPIO_Init+0x130>
          break;
 800094a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d801      	bhi.n	8000956 <HAL_GPIO_Init+0x13a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	e001      	b.n	800095a <HAL_GPIO_Init+0x13e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3304      	adds	r3, #4
 800095a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	2bff      	cmp	r3, #255	@ 0xff
 8000960:	d802      	bhi.n	8000968 <HAL_GPIO_Init+0x14c>
 8000962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	e002      	b.n	800096e <HAL_GPIO_Init+0x152>
 8000968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096a:	3b08      	subs	r3, #8
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	210f      	movs	r1, #15
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	6a39      	ldr	r1, [r7, #32]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	431a      	orrs	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80a9 	beq.w	8000aee <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800099c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ac8 <HAL_GPIO_Init+0x2ac>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a49      	ldr	r2, [pc, #292]	@ (8000ac8 <HAL_GPIO_Init+0x2ac>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b47      	ldr	r3, [pc, #284]	@ (8000ac8 <HAL_GPIO_Init+0x2ac>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009b4:	4a45      	ldr	r2, [pc, #276]	@ (8000acc <HAL_GPIO_Init+0x2b0>)
 80009b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	3302      	adds	r3, #2
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a3d      	ldr	r2, [pc, #244]	@ (8000ad0 <HAL_GPIO_Init+0x2b4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d00d      	beq.n	80009fc <HAL_GPIO_Init+0x1e0>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ad4 <HAL_GPIO_Init+0x2b8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d007      	beq.n	80009f8 <HAL_GPIO_Init+0x1dc>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a3b      	ldr	r2, [pc, #236]	@ (8000ad8 <HAL_GPIO_Init+0x2bc>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d101      	bne.n	80009f4 <HAL_GPIO_Init+0x1d8>
 80009f0:	2302      	movs	r3, #2
 80009f2:	e004      	b.n	80009fe <HAL_GPIO_Init+0x1e2>
 80009f4:	2303      	movs	r3, #3
 80009f6:	e002      	b.n	80009fe <HAL_GPIO_Init+0x1e2>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <HAL_GPIO_Init+0x1e2>
 80009fc:	2300      	movs	r3, #0
 80009fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a00:	f002 0203 	and.w	r2, r2, #3
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	4093      	lsls	r3, r2
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a0e:	492f      	ldr	r1, [pc, #188]	@ (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	3302      	adds	r3, #2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a28:	4b2c      	ldr	r3, [pc, #176]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	492b      	ldr	r1, [pc, #172]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	608b      	str	r3, [r1, #8]
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a36:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4927      	ldr	r1, [pc, #156]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a50:	4b22      	ldr	r3, [pc, #136]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a52:	68da      	ldr	r2, [r3, #12]
 8000a54:	4921      	ldr	r1, [pc, #132]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60cb      	str	r3, [r1, #12]
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a60:	68da      	ldr	r2, [r3, #12]
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	491d      	ldr	r1, [pc, #116]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	4917      	ldr	r1, [pc, #92]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	604b      	str	r3, [r1, #4]
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4913      	ldr	r1, [pc, #76]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d01f      	beq.n	8000ae0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	490d      	ldr	r1, [pc, #52]	@ (8000adc <HAL_GPIO_Init+0x2c0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	600b      	str	r3, [r1, #0]
 8000aac:	e01f      	b.n	8000aee <HAL_GPIO_Init+0x2d2>
 8000aae:	bf00      	nop
 8000ab0:	10320000 	.word	0x10320000
 8000ab4:	10310000 	.word	0x10310000
 8000ab8:	10220000 	.word	0x10220000
 8000abc:	10210000 	.word	0x10210000
 8000ac0:	10120000 	.word	0x10120000
 8000ac4:	10110000 	.word	0x10110000
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_GPIO_Init+0x2f4>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	4909      	ldr	r1, [pc, #36]	@ (8000b10 <HAL_GPIO_Init+0x2f4>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	3301      	adds	r3, #1
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afa:	fa22 f303 	lsr.w	r3, r2, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f47f ae96 	bne.w	8000830 <HAL_GPIO_Init+0x14>
  }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	372c      	adds	r7, #44	@ 0x2c
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40010400 	.word	0x40010400

08000b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4613      	mov	r3, r2
 8000b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b24:	787b      	ldrb	r3, [r7, #1]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b30:	e003      	b.n	8000b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	041a      	lsls	r2, r3, #16
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	611a      	str	r2, [r3, #16]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	041a      	lsls	r2, r3, #16
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43d9      	mvns	r1, r3
 8000b62:	887b      	ldrh	r3, [r7, #2]
 8000b64:	400b      	ands	r3, r1
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	611a      	str	r2, [r3, #16]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e272      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8087 	beq.w	8000ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b98:	4b92      	ldr	r3, [pc, #584]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 030c 	and.w	r3, r3, #12
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d00c      	beq.n	8000bbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	d112      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x5e>
 8000bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbe:	4b89      	ldr	r3, [pc, #548]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d06c      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x12c>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d168      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e24c      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bde:	d106      	bne.n	8000bee <HAL_RCC_OscConfig+0x76>
 8000be0:	4b80      	ldr	r3, [pc, #512]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a7f      	ldr	r2, [pc, #508]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	e02e      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10c      	bne.n	8000c10 <HAL_RCC_OscConfig+0x98>
 8000bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a7a      	ldr	r2, [pc, #488]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b78      	ldr	r3, [pc, #480]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a77      	ldr	r2, [pc, #476]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e01d      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0xbc>
 8000c1a:	4b72      	ldr	r3, [pc, #456]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a71      	ldr	r2, [pc, #452]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b6f      	ldr	r3, [pc, #444]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a6e      	ldr	r2, [pc, #440]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e00b      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000c34:	4b6b      	ldr	r3, [pc, #428]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a6a      	ldr	r2, [pc, #424]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b68      	ldr	r3, [pc, #416]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a67      	ldr	r2, [pc, #412]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d013      	beq.n	8000c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fcf8 	bl	8000648 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fcf4 	bl	8000648 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	@ 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e200      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f0      	beq.n	8000c5c <HAL_RCC_OscConfig+0xe4>
 8000c7a:	e014      	b.n	8000ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fce4 	bl	8000648 <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fce0 	bl	8000648 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b64      	cmp	r3, #100	@ 0x64
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e1ec      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	4b53      	ldr	r3, [pc, #332]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0x10c>
 8000ca2:	e000      	b.n	8000ca6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d063      	beq.n	8000d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cbe:	4b49      	ldr	r3, [pc, #292]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d11c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x18c>
 8000cca:	4b46      	ldr	r3, [pc, #280]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d116      	bne.n	8000d04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	4b43      	ldr	r3, [pc, #268]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x176>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d001      	beq.n	8000cee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e1c0      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cee:	4b3d      	ldr	r3, [pc, #244]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4939      	ldr	r1, [pc, #228]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d02:	e03a      	b.n	8000d7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d0c:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <HAL_RCC_OscConfig+0x270>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d12:	f7ff fc99 	bl	8000648 <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc95 	bl	8000648 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e1a1      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f0      	beq.n	8000d1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d38:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4927      	ldr	r1, [pc, #156]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d4e:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <HAL_RCC_OscConfig+0x270>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d54:	f7ff fc78 	bl	8000648 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc74 	bl	8000648 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e180      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d03a      	beq.n	8000dfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d019      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_RCC_OscConfig+0x274>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d94:	f7ff fc58 	bl	8000648 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc54 	bl	8000648 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e160      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 faea 	bl	8001394 <RCC_Delay>
 8000dc0:	e01c      	b.n	8000dfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_RCC_OscConfig+0x274>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc3e 	bl	8000648 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dce:	e00f      	b.n	8000df0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc3a 	bl	8000648 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d908      	bls.n	8000df0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e146      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	42420000 	.word	0x42420000
 8000dec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df0:	4b92      	ldr	r3, [pc, #584]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e9      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80a6 	beq.w	8000f56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e0e:	4b8b      	ldr	r3, [pc, #556]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10d      	bne.n	8000e36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b88      	ldr	r3, [pc, #544]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a87      	ldr	r2, [pc, #540]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b85      	ldr	r3, [pc, #532]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e32:	2301      	movs	r3, #1
 8000e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e36:	4b82      	ldr	r3, [pc, #520]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d118      	bne.n	8000e74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e42:	4b7f      	ldr	r3, [pc, #508]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a7e      	ldr	r2, [pc, #504]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fbfb 	bl	8000648 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e56:	f7ff fbf7 	bl	8000648 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b64      	cmp	r3, #100	@ 0x64
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e103      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	4b75      	ldr	r3, [pc, #468]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x312>
 8000e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a6e      	ldr	r2, [pc, #440]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6213      	str	r3, [r2, #32]
 8000e88:	e02d      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x334>
 8000e92:	4b6a      	ldr	r3, [pc, #424]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4a69      	ldr	r2, [pc, #420]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	6213      	str	r3, [r2, #32]
 8000e9e:	4b67      	ldr	r3, [pc, #412]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	4a66      	ldr	r2, [pc, #408]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	f023 0304 	bic.w	r3, r3, #4
 8000ea8:	6213      	str	r3, [r2, #32]
 8000eaa:	e01c      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d10c      	bne.n	8000ece <HAL_RCC_OscConfig+0x356>
 8000eb4:	4b61      	ldr	r3, [pc, #388]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	4a60      	ldr	r2, [pc, #384]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6213      	str	r3, [r2, #32]
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	e00b      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000ece:	4b5b      	ldr	r3, [pc, #364]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a5a      	ldr	r2, [pc, #360]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6213      	str	r3, [r2, #32]
 8000eda:	4b58      	ldr	r3, [pc, #352]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a57      	ldr	r2, [pc, #348]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0304 	bic.w	r3, r3, #4
 8000ee4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d015      	beq.n	8000f1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff fbab 	bl	8000648 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fba7 	bl	8000648 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e0b1      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0ee      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x37e>
 8000f18:	e014      	b.n	8000f44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fb95 	bl	8000648 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	e00a      	b.n	8000f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f22:	f7ff fb91 	bl	8000648 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e09b      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	4b40      	ldr	r3, [pc, #256]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1ee      	bne.n	8000f22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d105      	bne.n	8000f56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8087 	beq.w	800106e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f60:	4b36      	ldr	r3, [pc, #216]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d061      	beq.n	8001030 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d146      	bne.n	8001002 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f74:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fb65 	bl	8000648 <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f82:	f7ff fb61 	bl	8000648 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e06d      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	4b29      	ldr	r3, [pc, #164]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f0      	bne.n	8000f82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa8:	d108      	bne.n	8000fbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	4921      	ldr	r1, [pc, #132]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a19      	ldr	r1, [r3, #32]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	491b      	ldr	r1, [pc, #108]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fb35 	bl	8000648 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff fb31 	bl	8000648 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e03d      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x46a>
 8001000:	e035      	b.n	800106e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fb1e 	bl	8000648 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001010:	f7ff fb1a 	bl	8000648 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e026      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x498>
 800102e:	e01e      	b.n	800106e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d107      	bne.n	8001048 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e019      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
 800103c:	40021000 	.word	0x40021000
 8001040:	40007000 	.word	0x40007000
 8001044:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_RCC_OscConfig+0x500>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	429a      	cmp	r2, r3
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	429a      	cmp	r2, r3
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0d0      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001090:	4b6a      	ldr	r3, [pc, #424]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d910      	bls.n	80010c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	4b67      	ldr	r3, [pc, #412]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 0207 	bic.w	r2, r3, #7
 80010a6:	4965      	ldr	r1, [pc, #404]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ae:	4b63      	ldr	r3, [pc, #396]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0b8      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d020      	beq.n	800110e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010d8:	4b59      	ldr	r3, [pc, #356]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a58      	ldr	r2, [pc, #352]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f0:	4b53      	ldr	r3, [pc, #332]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010fc:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	494d      	ldr	r1, [pc, #308]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d040      	beq.n	800119c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d107      	bne.n	8001132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d115      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e07f      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d107      	bne.n	800114a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113a:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e073      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e06b      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115a:	4b39      	ldr	r3, [pc, #228]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f023 0203 	bic.w	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4936      	ldr	r1, [pc, #216]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800116c:	f7ff fa6c 	bl	8000648 <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001172:	e00a      	b.n	800118a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001174:	f7ff fa68 	bl	8000648 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e053      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 020c 	and.w	r2, r3, #12
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	d1eb      	bne.n	8001174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d210      	bcs.n	80011cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 0207 	bic.w	r2, r3, #7
 80011b2:	4922      	ldr	r1, [pc, #136]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e032      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d008      	beq.n	80011ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	4916      	ldr	r1, [pc, #88]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	490e      	ldr	r1, [pc, #56]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800120a:	f000 f821 	bl	8001250 <HAL_RCC_GetSysClockFreq>
 800120e:	4602      	mov	r2, r0
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	490a      	ldr	r1, [pc, #40]	@ (8001244 <HAL_RCC_ClockConfig+0x1c8>)
 800121c:	5ccb      	ldrb	r3, [r1, r3]
 800121e:	fa22 f303 	lsr.w	r3, r2, r3
 8001222:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <HAL_RCC_ClockConfig+0x1cc>)
 8001224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_RCC_ClockConfig+0x1d0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f916 	bl	800045c <HAL_InitTick>

  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40022000 	.word	0x40022000
 8001240:	40021000 	.word	0x40021000
 8001244:	080033a4 	.word	0x080033a4
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d002      	beq.n	8001280 <HAL_RCC_GetSysClockFreq+0x30>
 800127a:	2b08      	cmp	r3, #8
 800127c:	d003      	beq.n	8001286 <HAL_RCC_GetSysClockFreq+0x36>
 800127e:	e027      	b.n	80012d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001282:	613b      	str	r3, [r7, #16]
      break;
 8001284:	e027      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	0c9b      	lsrs	r3, r3, #18
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d010      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	0c5b      	lsrs	r3, r3, #17
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012b2:	fb03 f202 	mul.w	r2, r3, r2
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e004      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	613b      	str	r3, [r7, #16]
      break;
 80012ce:	e002      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012d2:	613b      	str	r3, [r7, #16]
      break;
 80012d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d6:	693b      	ldr	r3, [r7, #16]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	007a1200 	.word	0x007a1200
 80012ec:	080033bc 	.word	0x080033bc
 80012f0:	080033cc 	.word	0x080033cc
 80012f4:	003d0900 	.word	0x003d0900

080012f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012fc:	4b02      	ldr	r3, [pc, #8]	@ (8001308 <HAL_RCC_GetHCLKFreq+0x10>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000000 	.word	0x20000000

0800130c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001310:	f7ff fff2 	bl	80012f8 <HAL_RCC_GetHCLKFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	4903      	ldr	r1, [pc, #12]	@ (8001330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	080033b4 	.word	0x080033b4

08001334 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	220f      	movs	r2, #15
 8001342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <HAL_RCC_GetClockConfig+0x58>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_RCC_GetClockConfig+0x58>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_RCC_GetClockConfig+0x58>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_RCC_GetClockConfig+0x58>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0207 	and.w	r2, r3, #7
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000
 8001390:	40022000 	.word	0x40022000

08001394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <RCC_Delay+0x34>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <RCC_Delay+0x38>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0a5b      	lsrs	r3, r3, #9
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013b0:	bf00      	nop
  }
  while (Delay --);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	60fa      	str	r2, [r7, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f9      	bne.n	80013b0 <RCC_Delay+0x1c>
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	20000000 	.word	0x20000000
 80013cc:	10624dd3 	.word	0x10624dd3

080013d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e041      	b.n	8001466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f839 	bl	800146e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3304      	adds	r3, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4610      	mov	r0, r2
 8001410:	f000 f9ae 	bl	8001770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d001      	beq.n	8001498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e035      	b.n	8001504 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <HAL_TIM_Base_Start_IT+0x90>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d009      	beq.n	80014ce <HAL_TIM_Base_Start_IT+0x4e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014c2:	d004      	beq.n	80014ce <HAL_TIM_Base_Start_IT+0x4e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <HAL_TIM_Base_Start_IT+0x94>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d111      	bne.n	80014f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b06      	cmp	r3, #6
 80014de:	d010      	beq.n	8001502 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f0:	e007      	b.n	8001502 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40012c00 	.word	0x40012c00
 8001514:	40000400 	.word	0x40000400

08001518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b02      	cmp	r3, #2
 800152c:	d122      	bne.n	8001574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b02      	cmp	r3, #2
 800153a:	d11b      	bne.n	8001574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f06f 0202 	mvn.w	r2, #2
 8001544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f8ed 	bl	800173a <HAL_TIM_IC_CaptureCallback>
 8001560:	e005      	b.n	800156e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f8e0 	bl	8001728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f8ef 	bl	800174c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b04      	cmp	r3, #4
 8001580:	d122      	bne.n	80015c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b04      	cmp	r3, #4
 800158e:	d11b      	bne.n	80015c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f06f 0204 	mvn.w	r2, #4
 8001598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2202      	movs	r2, #2
 800159e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f8c3 	bl	800173a <HAL_TIM_IC_CaptureCallback>
 80015b4:	e005      	b.n	80015c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8b6 	bl	8001728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8c5 	bl	800174c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d122      	bne.n	800161c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d11b      	bne.n	800161c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f06f 0208 	mvn.w	r2, #8
 80015ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2204      	movs	r2, #4
 80015f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f899 	bl	800173a <HAL_TIM_IC_CaptureCallback>
 8001608:	e005      	b.n	8001616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f88c 	bl	8001728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f89b 	bl	800174c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b10      	cmp	r3, #16
 8001628:	d122      	bne.n	8001670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b10      	cmp	r3, #16
 8001636:	d11b      	bne.n	8001670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0210 	mvn.w	r2, #16
 8001640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2208      	movs	r2, #8
 8001646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f86f 	bl	800173a <HAL_TIM_IC_CaptureCallback>
 800165c:	e005      	b.n	800166a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f862 	bl	8001728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f871 	bl	800174c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10e      	bne.n	800169c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7fe fe90 	bl	80003bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a6:	2b80      	cmp	r3, #128	@ 0x80
 80016a8:	d10e      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b4:	2b80      	cmp	r3, #128	@ 0x80
 80016b6:	d107      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80016c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8b5 	bl	8001832 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d2:	2b40      	cmp	r3, #64	@ 0x40
 80016d4:	d10e      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e0:	2b40      	cmp	r3, #64	@ 0x40
 80016e2:	d107      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80016ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f835 	bl	800175e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d10e      	bne.n	8001720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	2b20      	cmp	r3, #32
 800170e:	d107      	bne.n	8001720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0220 	mvn.w	r2, #32
 8001718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f880 	bl	8001820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a25      	ldr	r2, [pc, #148]	@ (8001818 <TIM_Base_SetConfig+0xa8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d007      	beq.n	8001798 <TIM_Base_SetConfig+0x28>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800178e:	d003      	beq.n	8001798 <TIM_Base_SetConfig+0x28>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a22      	ldr	r2, [pc, #136]	@ (800181c <TIM_Base_SetConfig+0xac>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d108      	bne.n	80017aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800179e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001818 <TIM_Base_SetConfig+0xa8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <TIM_Base_SetConfig+0x52>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b8:	d003      	beq.n	80017c2 <TIM_Base_SetConfig+0x52>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a17      	ldr	r2, [pc, #92]	@ (800181c <TIM_Base_SetConfig+0xac>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d108      	bne.n	80017d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <TIM_Base_SetConfig+0xa8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d103      	bne.n	8001808 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	615a      	str	r2, [r3, #20]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40012c00 	.word	0x40012c00
 800181c:	40000400 	.word	0x40000400

08001820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	2b84      	cmp	r3, #132	@ 0x84
 8001858:	d005      	beq.n	8001866 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800185a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	3303      	adds	r3, #3
 8001864:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001876:	f000 fcfb 	bl	8002270 <vTaskStartScheduler>
  
  return osOK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}

08001880 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af04      	add	r7, sp, #16
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d020      	beq.n	80018d4 <osThreadCreate+0x54>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01c      	beq.n	80018d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685c      	ldr	r4, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691e      	ldr	r6, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ffc9 	bl	8001844 <makeFreeRtosPriority>
 80018b2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018bc:	9202      	str	r2, [sp, #8]
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	9100      	str	r1, [sp, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4632      	mov	r2, r6
 80018c6:	4629      	mov	r1, r5
 80018c8:	4620      	mov	r0, r4
 80018ca:	f000 fa61 	bl	8001d90 <xTaskCreateStatic>
 80018ce:	4603      	mov	r3, r0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e01c      	b.n	800190e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685c      	ldr	r4, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018e0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ffab 	bl	8001844 <makeFreeRtosPriority>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	9200      	str	r2, [sp, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4632      	mov	r2, r6
 80018fc:	4629      	mov	r1, r5
 80018fe:	4620      	mov	r0, r4
 8001900:	f000 faa5 	bl	8001e4e <xTaskCreate>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	d001      	beq.n	800190e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001918 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <osDelay+0x16>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	e000      	b.n	8001930 <osDelay+0x18>
 800192e:	2301      	movs	r3, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fbd3 	bl	80020dc <vTaskDelay>
  
  return osOK;
 8001936:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d011      	beq.n	8001976 <osMessageCreate+0x36>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2400      	movs	r4, #0
 800196c:	9400      	str	r4, [sp, #0]
 800196e:	f000 f935 	bl	8001bdc <xQueueGenericCreateStatic>
 8001972:	4603      	mov	r3, r0
 8001974:	e008      	b.n	8001988 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	4619      	mov	r1, r3
 8001982:	f000 f9a7 	bl	8001cd4 <xQueueGenericCreate>
 8001986:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fbd5 	bl	8002148 <vTaskSuspend>
  
  return osOK;
 800199e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f103 0208 	add.w	r2, r3, #8
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f103 0208 	add.w	r2, r3, #8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f103 0208 	add.w	r2, r3, #8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	d103      	bne.n	8001a64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e00c      	b.n	8001a7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3308      	adds	r3, #8
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e002      	b.n	8001a72 <vListInsert+0x2e>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d2f6      	bcs.n	8001a6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6892      	ldr	r2, [r2, #8]
 8001aca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6852      	ldr	r2, [r2, #4]
 8001ad4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d103      	bne.n	8001ae8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1e5a      	subs	r2, r3, #1
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
	...

08001b08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10b      	bne.n	8001b34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b20:	f383 8811 	msr	BASEPRI, r3
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	f3bf 8f4f 	dsb	sy
 8001b2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b34:	f001 f86a 	bl	8002c0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	441a      	add	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b64:	3b01      	subs	r3, #1
 8001b66:	68f9      	ldr	r1, [r7, #12]
 8001b68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	441a      	add	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	22ff      	movs	r2, #255	@ 0xff
 8001b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	22ff      	movs	r2, #255	@ 0xff
 8001b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d114      	bne.n	8001bb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01a      	beq.n	8001bc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3310      	adds	r3, #16
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fda0 	bl	80026dc <xTaskRemoveFromEventList>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d012      	beq.n	8001bc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <xQueueGenericReset+0xd0>)
 8001ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f3bf 8f4f 	dsb	sy
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	e009      	b.n	8001bc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3310      	adds	r3, #16
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fef5 	bl	80019a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3324      	adds	r3, #36	@ 0x24
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fef0 	bl	80019a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001bc8:	f001 f850 	bl	8002c6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000ed04 	.word	0xe000ed04

08001bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08e      	sub	sp, #56	@ 0x38
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10b      	bne.n	8001c26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c12:	f383 8811 	msr	BASEPRI, r3
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	e7fd      	b.n	8001c22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <xQueueGenericCreateStatic+0x56>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <xQueueGenericCreateStatic+0x5a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <xQueueGenericCreateStatic+0x5c>
 8001c36:	2300      	movs	r3, #0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10b      	bne.n	8001c54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	623b      	str	r3, [r7, #32]
}
 8001c4e:	bf00      	nop
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <xQueueGenericCreateStatic+0x84>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <xQueueGenericCreateStatic+0x88>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <xQueueGenericCreateStatic+0x8a>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10b      	bne.n	8001c82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c6e:	f383 8811 	msr	BASEPRI, r3
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	61fb      	str	r3, [r7, #28]
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	e7fd      	b.n	8001c7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c82:	2348      	movs	r3, #72	@ 0x48
 8001c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b48      	cmp	r3, #72	@ 0x48
 8001c8a:	d00b      	beq.n	8001ca4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c90:	f383 8811 	msr	BASEPRI, r3
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	61bb      	str	r3, [r7, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cb6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f844 	bl	8001d52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3730      	adds	r7, #48	@ 0x30
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	@ 0x28
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10b      	bne.n	8001d00 <xQueueGenericCreate+0x2c>
	__asm volatile
 8001ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cec:	f383 8811 	msr	BASEPRI, r3
 8001cf0:	f3bf 8f6f 	isb	sy
 8001cf4:	f3bf 8f4f 	dsb	sy
 8001cf8:	613b      	str	r3, [r7, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e004      	b.n	8001d16 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3348      	adds	r3, #72	@ 0x48
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 f838 	bl	8002d90 <pvPortMalloc>
 8001d20:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00f      	beq.n	8001d48 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	3348      	adds	r3, #72	@ 0x48
 8001d2c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f805 	bl	8001d52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001d48:	69bb      	ldr	r3, [r7, #24]
	}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e002      	b.n	8001d74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d80:	2101      	movs	r1, #1
 8001d82:	69b8      	ldr	r0, [r7, #24]
 8001d84:	f7ff fec0 	bl	8001b08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	@ 0x38
 8001d94:	af04      	add	r7, sp, #16
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8001da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	623b      	str	r3, [r7, #32]
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10b      	bne.n	8001dda <xTaskCreateStatic+0x4a>
	__asm volatile
 8001dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	61fb      	str	r3, [r7, #28]
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	e7fd      	b.n	8001dd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001dda:	23a0      	movs	r3, #160	@ 0xa0
 8001ddc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001de2:	d00b      	beq.n	8001dfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8001de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	61bb      	str	r3, [r7, #24]
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01e      	beq.n	8001e40 <xTaskCreateStatic+0xb0>
 8001e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01b      	beq.n	8001e40 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e10:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	9303      	str	r3, [sp, #12]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f850 	bl	8001ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e3a:	f000 f8e5 	bl	8002008 <prvAddNewTaskToReadyList>
 8001e3e:	e001      	b.n	8001e44 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001e44:	697b      	ldr	r3, [r7, #20]
	}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3728      	adds	r7, #40	@ 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b08c      	sub	sp, #48	@ 0x30
 8001e52:	af04      	add	r7, sp, #16
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 ff94 	bl	8002d90 <pvPortMalloc>
 8001e68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e70:	20a0      	movs	r0, #160	@ 0xa0
 8001e72:	f000 ff8d 	bl	8002d90 <pvPortMalloc>
 8001e76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e84:	e005      	b.n	8001e92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f001 f84a 	bl	8002f20 <vPortFree>
 8001e8c:	e001      	b.n	8001e92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d017      	beq.n	8001ec8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ea0:	88fa      	ldrh	r2, [r7, #6]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	9303      	str	r3, [sp, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f80e 	bl	8001ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ebc:	69f8      	ldr	r0, [r7, #28]
 8001ebe:	f000 f8a3 	bl	8002008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	e002      	b.n	8001ece <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ecc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ece:	69bb      	ldr	r3, [r7, #24]
	}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f023 0307 	bic.w	r3, r3, #7
 8001efe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	617b      	str	r3, [r7, #20]
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	e7fd      	b.n	8001f1e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e012      	b.n	8001f4e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	7819      	ldrb	r1, [r3, #0]
 8001f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	3334      	adds	r3, #52	@ 0x34
 8001f38:	460a      	mov	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d9e9      	bls.n	8001f28 <prvInitialiseNewTask+0x50>
 8001f54:	e000      	b.n	8001f58 <prvInitialiseNewTask+0x80>
		{
			break;
 8001f56:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d901      	bls.n	8001f6a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f66:	2306      	movs	r3, #6
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f74:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f78:	2200      	movs	r2, #0
 8001f7a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fd30 	bl	80019e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f88:	3318      	adds	r3, #24
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fd2b 	bl	80019e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f98:	f1c3 0207 	rsb	r2, r3, #7
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb8:	334c      	adds	r3, #76	@ 0x4c
 8001fba:	224c      	movs	r2, #76	@ 0x4c
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 f8c4 	bl	800314c <memset>
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <prvInitialiseNewTask+0x124>)
 8001fc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002000 <prvInitialiseNewTask+0x128>)
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002004 <prvInitialiseNewTask+0x12c>)
 8001fd4:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	68f9      	ldr	r1, [r7, #12]
 8001fda:	69b8      	ldr	r0, [r7, #24]
 8001fdc:	f000 fd28 	bl	8002a30 <pxPortInitialiseStack>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ff2:	bf00      	nop
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200010c8 	.word	0x200010c8
 8002000:	20001130 	.word	0x20001130
 8002004:	20001198 	.word	0x20001198

08002008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002010:	f000 fdfc 	bl	8002c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002014:	4b2a      	ldr	r3, [pc, #168]	@ (80020c0 <prvAddNewTaskToReadyList+0xb8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	4a29      	ldr	r2, [pc, #164]	@ (80020c0 <prvAddNewTaskToReadyList+0xb8>)
 800201c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800201e:	4b29      	ldr	r3, [pc, #164]	@ (80020c4 <prvAddNewTaskToReadyList+0xbc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002026:	4a27      	ldr	r2, [pc, #156]	@ (80020c4 <prvAddNewTaskToReadyList+0xbc>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800202c:	4b24      	ldr	r3, [pc, #144]	@ (80020c0 <prvAddNewTaskToReadyList+0xb8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d110      	bne.n	8002056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002034:	f000 fbce 	bl	80027d4 <prvInitialiseTaskLists>
 8002038:	e00d      	b.n	8002056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800203a:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <prvAddNewTaskToReadyList+0xc0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <prvAddNewTaskToReadyList+0xbc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	429a      	cmp	r2, r3
 800204e:	d802      	bhi.n	8002056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002050:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <prvAddNewTaskToReadyList+0xbc>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002056:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <prvAddNewTaskToReadyList+0xc4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	4a1b      	ldr	r2, [pc, #108]	@ (80020cc <prvAddNewTaskToReadyList+0xc4>)
 800205e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	2201      	movs	r2, #1
 8002066:	409a      	lsls	r2, r3
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <prvAddNewTaskToReadyList+0xc8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4313      	orrs	r3, r2
 800206e:	4a18      	ldr	r2, [pc, #96]	@ (80020d0 <prvAddNewTaskToReadyList+0xc8>)
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4a15      	ldr	r2, [pc, #84]	@ (80020d4 <prvAddNewTaskToReadyList+0xcc>)
 8002080:	441a      	add	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	4619      	mov	r1, r3
 8002088:	4610      	mov	r0, r2
 800208a:	f7ff fcb8 	bl	80019fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800208e:	f000 fded 	bl	8002c6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <prvAddNewTaskToReadyList+0xc0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00e      	beq.n	80020b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <prvAddNewTaskToReadyList+0xbc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <prvAddNewTaskToReadyList+0xd0>)
 80020aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000047c 	.word	0x2000047c
 80020c4:	2000037c 	.word	0x2000037c
 80020c8:	20000488 	.word	0x20000488
 80020cc:	20000498 	.word	0x20000498
 80020d0:	20000484 	.word	0x20000484
 80020d4:	20000380 	.word	0x20000380
 80020d8:	e000ed04 	.word	0xe000ed04

080020dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d018      	beq.n	8002120 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80020ee:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <vTaskDelay+0x64>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <vTaskDelay+0x32>
	__asm volatile
 80020f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020fa:	f383 8811 	msr	BASEPRI, r3
 80020fe:	f3bf 8f6f 	isb	sy
 8002102:	f3bf 8f4f 	dsb	sy
 8002106:	60bb      	str	r3, [r7, #8]
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	e7fd      	b.n	800210a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800210e:	f000 f919 	bl	8002344 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002112:	2100      	movs	r1, #0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fc25 	bl	8002964 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800211a:	f000 f921 	bl	8002360 <xTaskResumeAll>
 800211e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d107      	bne.n	8002136 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002126:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <vTaskDelay+0x68>)
 8002128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004a4 	.word	0x200004a4
 8002144:	e000ed04 	.word	0xe000ed04

08002148 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002150:	f000 fd5c 	bl	8002c0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <vTaskSuspend+0x18>
 800215a:	4b3d      	ldr	r3, [pc, #244]	@ (8002250 <vTaskSuspend+0x108>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e000      	b.n	8002162 <vTaskSuspend+0x1a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3304      	adds	r3, #4
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fca3 	bl	8001ab4 <uxListRemove>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d115      	bne.n	80021a0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002178:	4936      	ldr	r1, [pc, #216]	@ (8002254 <vTaskSuspend+0x10c>)
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10a      	bne.n	80021a0 <vTaskSuspend+0x58>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218e:	2201      	movs	r2, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43da      	mvns	r2, r3
 8002196:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <vTaskSuspend+0x110>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4013      	ands	r3, r2
 800219c:	4a2e      	ldr	r2, [pc, #184]	@ (8002258 <vTaskSuspend+0x110>)
 800219e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3318      	adds	r3, #24
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc81 	bl	8001ab4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3304      	adds	r3, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4828      	ldr	r0, [pc, #160]	@ (800225c <vTaskSuspend+0x114>)
 80021ba:	f7ff fc20 	bl	80019fe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d103      	bne.n	80021d2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80021d2:	f000 fd4b 	bl	8002c6c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80021d6:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <vTaskSuspend+0x118>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80021de:	f000 fd15 	bl	8002c0c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80021e2:	f000 fb9b 	bl	800291c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80021e6:	f000 fd41 	bl	8002c6c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80021ea:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <vTaskSuspend+0x108>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d128      	bne.n	8002246 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <vTaskSuspend+0x118>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d018      	beq.n	800222e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <vTaskSuspend+0x11c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <vTaskSuspend+0xd4>
	__asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	60bb      	str	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <vTaskSuspend+0x120>)
 800221e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800222c:	e00b      	b.n	8002246 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <vTaskSuspend+0x114>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <vTaskSuspend+0x124>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d103      	bne.n	8002242 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <vTaskSuspend+0x108>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
	}
 8002240:	e001      	b.n	8002246 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8002242:	f000 f9e9 	bl	8002618 <vTaskSwitchContext>
	}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000037c 	.word	0x2000037c
 8002254:	20000380 	.word	0x20000380
 8002258:	20000484 	.word	0x20000484
 800225c:	20000468 	.word	0x20000468
 8002260:	20000488 	.word	0x20000488
 8002264:	200004a4 	.word	0x200004a4
 8002268:	e000ed04 	.word	0xe000ed04
 800226c:	2000047c 	.word	0x2000047c

08002270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800227e:	463a      	mov	r2, r7
 8002280:	1d39      	adds	r1, r7, #4
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	4618      	mov	r0, r3
 8002288:	f7fd ff62 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	9202      	str	r2, [sp, #8]
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	2300      	movs	r3, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2300      	movs	r3, #0
 800229c:	460a      	mov	r2, r1
 800229e:	4921      	ldr	r1, [pc, #132]	@ (8002324 <vTaskStartScheduler+0xb4>)
 80022a0:	4821      	ldr	r0, [pc, #132]	@ (8002328 <vTaskStartScheduler+0xb8>)
 80022a2:	f7ff fd75 	bl	8001d90 <xTaskCreateStatic>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a20      	ldr	r2, [pc, #128]	@ (800232c <vTaskStartScheduler+0xbc>)
 80022aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80022ac:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <vTaskStartScheduler+0xbc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80022b4:	2301      	movs	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e001      	b.n	80022be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11b      	bne.n	80022fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	613b      	str	r3, [r7, #16]
}
 80022d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <vTaskStartScheduler+0xc0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	334c      	adds	r3, #76	@ 0x4c
 80022de:	4a15      	ldr	r2, [pc, #84]	@ (8002334 <vTaskStartScheduler+0xc4>)
 80022e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <vTaskStartScheduler+0xc8>)
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80022ea:	4b14      	ldr	r3, [pc, #80]	@ (800233c <vTaskStartScheduler+0xcc>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80022f0:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <vTaskStartScheduler+0xd0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80022f6:	f000 fc17 	bl	8002b28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80022fa:	e00f      	b.n	800231c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d10b      	bne.n	800231c <vTaskStartScheduler+0xac>
	__asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	60fb      	str	r3, [r7, #12]
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <vTaskStartScheduler+0xa8>
}
 800231c:	bf00      	nop
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	0800339c 	.word	0x0800339c
 8002328:	080027a5 	.word	0x080027a5
 800232c:	200004a0 	.word	0x200004a0
 8002330:	2000037c 	.word	0x2000037c
 8002334:	20000010 	.word	0x20000010
 8002338:	2000049c 	.word	0x2000049c
 800233c:	20000488 	.word	0x20000488
 8002340:	20000480 	.word	0x20000480

08002344 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <vTaskSuspendAll+0x18>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	4a03      	ldr	r2, [pc, #12]	@ (800235c <vTaskSuspendAll+0x18>)
 8002350:	6013      	str	r3, [r2, #0]
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200004a4 	.word	0x200004a4

08002360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800236e:	4b42      	ldr	r3, [pc, #264]	@ (8002478 <xTaskResumeAll+0x118>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <xTaskResumeAll+0x2e>
	__asm volatile
 8002376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	603b      	str	r3, [r7, #0]
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	e7fd      	b.n	800238a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800238e:	f000 fc3d 	bl	8002c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002392:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <xTaskResumeAll+0x118>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3b01      	subs	r3, #1
 8002398:	4a37      	ldr	r2, [pc, #220]	@ (8002478 <xTaskResumeAll+0x118>)
 800239a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800239c:	4b36      	ldr	r3, [pc, #216]	@ (8002478 <xTaskResumeAll+0x118>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d161      	bne.n	8002468 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023a4:	4b35      	ldr	r3, [pc, #212]	@ (800247c <xTaskResumeAll+0x11c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d05d      	beq.n	8002468 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023ac:	e02e      	b.n	800240c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80023ae:	4b34      	ldr	r3, [pc, #208]	@ (8002480 <xTaskResumeAll+0x120>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3318      	adds	r3, #24
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fb7a 	bl	8001ab4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3304      	adds	r3, #4
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fb75 	bl	8001ab4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	2201      	movs	r2, #1
 80023d0:	409a      	lsls	r2, r3
 80023d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <xTaskResumeAll+0x124>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <xTaskResumeAll+0x124>)
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4a27      	ldr	r2, [pc, #156]	@ (8002488 <xTaskResumeAll+0x128>)
 80023ea:	441a      	add	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3304      	adds	r3, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f7ff fb03 	bl	80019fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023fc:	4b23      	ldr	r3, [pc, #140]	@ (800248c <xTaskResumeAll+0x12c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002406:	4b22      	ldr	r3, [pc, #136]	@ (8002490 <xTaskResumeAll+0x130>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800240c:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <xTaskResumeAll+0x120>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1cc      	bne.n	80023ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800241a:	f000 fa7f 	bl	800291c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800241e:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <xTaskResumeAll+0x134>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d010      	beq.n	800244c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800242a:	f000 f837 	bl	800249c <xTaskIncrementTick>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002434:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <xTaskResumeAll+0x130>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3b01      	subs	r3, #1
 800243e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f1      	bne.n	800242a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002446:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <xTaskResumeAll+0x134>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800244c:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <xTaskResumeAll+0x130>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d009      	beq.n	8002468 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002454:	2301      	movs	r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002458:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <xTaskResumeAll+0x138>)
 800245a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002468:	f000 fc00 	bl	8002c6c <vPortExitCritical>

	return xAlreadyYielded;
 800246c:	68bb      	ldr	r3, [r7, #8]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200004a4 	.word	0x200004a4
 800247c:	2000047c 	.word	0x2000047c
 8002480:	2000043c 	.word	0x2000043c
 8002484:	20000484 	.word	0x20000484
 8002488:	20000380 	.word	0x20000380
 800248c:	2000037c 	.word	0x2000037c
 8002490:	20000490 	.word	0x20000490
 8002494:	2000048c 	.word	0x2000048c
 8002498:	e000ed04 	.word	0xe000ed04

0800249c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024a6:	4b51      	ldr	r3, [pc, #324]	@ (80025ec <xTaskIncrementTick+0x150>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 808e 	bne.w	80025cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80024b0:	4b4f      	ldr	r3, [pc, #316]	@ (80025f0 <xTaskIncrementTick+0x154>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80024b8:	4a4d      	ldr	r2, [pc, #308]	@ (80025f0 <xTaskIncrementTick+0x154>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d121      	bne.n	8002508 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80024c4:	4b4b      	ldr	r3, [pc, #300]	@ (80025f4 <xTaskIncrementTick+0x158>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	603b      	str	r3, [r7, #0]
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	e7fd      	b.n	80024e2 <xTaskIncrementTick+0x46>
 80024e6:	4b43      	ldr	r3, [pc, #268]	@ (80025f4 <xTaskIncrementTick+0x158>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	4b42      	ldr	r3, [pc, #264]	@ (80025f8 <xTaskIncrementTick+0x15c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a40      	ldr	r2, [pc, #256]	@ (80025f4 <xTaskIncrementTick+0x158>)
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4a40      	ldr	r2, [pc, #256]	@ (80025f8 <xTaskIncrementTick+0x15c>)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b40      	ldr	r3, [pc, #256]	@ (80025fc <xTaskIncrementTick+0x160>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a3e      	ldr	r2, [pc, #248]	@ (80025fc <xTaskIncrementTick+0x160>)
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	f000 fa0a 	bl	800291c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002508:	4b3d      	ldr	r3, [pc, #244]	@ (8002600 <xTaskIncrementTick+0x164>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	429a      	cmp	r2, r3
 8002510:	d34d      	bcc.n	80025ae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002512:	4b38      	ldr	r3, [pc, #224]	@ (80025f4 <xTaskIncrementTick+0x158>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <xTaskIncrementTick+0x84>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <xTaskIncrementTick+0x86>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002526:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <xTaskIncrementTick+0x164>)
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	601a      	str	r2, [r3, #0]
					break;
 800252e:	e03e      	b.n	80025ae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002530:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <xTaskIncrementTick+0x158>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d203      	bcs.n	8002550 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002548:	4a2d      	ldr	r2, [pc, #180]	@ (8002600 <xTaskIncrementTick+0x164>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
						break;
 800254e:	e02e      	b.n	80025ae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3304      	adds	r3, #4
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff faad 	bl	8001ab4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3318      	adds	r3, #24
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff faa4 	bl	8001ab4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	2201      	movs	r2, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	4b23      	ldr	r3, [pc, #140]	@ (8002604 <xTaskIncrementTick+0x168>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	4a22      	ldr	r2, [pc, #136]	@ (8002604 <xTaskIncrementTick+0x168>)
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4a1f      	ldr	r2, [pc, #124]	@ (8002608 <xTaskIncrementTick+0x16c>)
 800258c:	441a      	add	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3304      	adds	r3, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f7ff fa32 	bl	80019fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259e:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <xTaskIncrementTick+0x170>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3b4      	bcc.n	8002512 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025ac:	e7b1      	b.n	8002512 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80025ae:	4b17      	ldr	r3, [pc, #92]	@ (800260c <xTaskIncrementTick+0x170>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b4:	4914      	ldr	r1, [pc, #80]	@ (8002608 <xTaskIncrementTick+0x16c>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d907      	bls.n	80025d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80025c6:	2301      	movs	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e004      	b.n	80025d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80025cc:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <xTaskIncrementTick+0x174>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002610 <xTaskIncrementTick+0x174>)
 80025d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80025d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <xTaskIncrementTick+0x178>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80025de:	2301      	movs	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80025e2:	697b      	ldr	r3, [r7, #20]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200004a4 	.word	0x200004a4
 80025f0:	20000480 	.word	0x20000480
 80025f4:	20000434 	.word	0x20000434
 80025f8:	20000438 	.word	0x20000438
 80025fc:	20000494 	.word	0x20000494
 8002600:	2000049c 	.word	0x2000049c
 8002604:	20000484 	.word	0x20000484
 8002608:	20000380 	.word	0x20000380
 800260c:	2000037c 	.word	0x2000037c
 8002610:	2000048c 	.word	0x2000048c
 8002614:	20000490 	.word	0x20000490

08002618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800261e:	4b29      	ldr	r3, [pc, #164]	@ (80026c4 <vTaskSwitchContext+0xac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002626:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <vTaskSwitchContext+0xb0>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800262c:	e045      	b.n	80026ba <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800262e:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <vTaskSwitchContext+0xb0>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002634:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <vTaskSwitchContext+0xb4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002642:	7afb      	ldrb	r3, [r7, #11]
 8002644:	f1c3 031f 	rsb	r3, r3, #31
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	4921      	ldr	r1, [pc, #132]	@ (80026d0 <vTaskSwitchContext+0xb8>)
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <vTaskSwitchContext+0x5e>
	__asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	607b      	str	r3, [r7, #4]
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	e7fd      	b.n	8002672 <vTaskSwitchContext+0x5a>
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4a13      	ldr	r2, [pc, #76]	@ (80026d0 <vTaskSwitchContext+0xb8>)
 8002682:	4413      	add	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	3308      	adds	r3, #8
 8002698:	429a      	cmp	r2, r3
 800269a:	d104      	bne.n	80026a6 <vTaskSwitchContext+0x8e>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <vTaskSwitchContext+0xbc>)
 80026ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80026b0:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <vTaskSwitchContext+0xbc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	334c      	adds	r3, #76	@ 0x4c
 80026b6:	4a08      	ldr	r2, [pc, #32]	@ (80026d8 <vTaskSwitchContext+0xc0>)
 80026b8:	6013      	str	r3, [r2, #0]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	200004a4 	.word	0x200004a4
 80026c8:	20000490 	.word	0x20000490
 80026cc:	20000484 	.word	0x20000484
 80026d0:	20000380 	.word	0x20000380
 80026d4:	2000037c 	.word	0x2000037c
 80026d8:	20000010 	.word	0x20000010

080026dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10b      	bne.n	800270a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	60fb      	str	r3, [r7, #12]
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	e7fd      	b.n	8002706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	3318      	adds	r3, #24
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f9d0 	bl	8001ab4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <xTaskRemoveFromEventList+0xb0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d11c      	bne.n	8002756 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	3304      	adds	r3, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f9c7 	bl	8001ab4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	2201      	movs	r2, #1
 800272c:	409a      	lsls	r2, r3
 800272e:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <xTaskRemoveFromEventList+0xb4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	4a16      	ldr	r2, [pc, #88]	@ (8002790 <xTaskRemoveFromEventList+0xb4>)
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <xTaskRemoveFromEventList+0xb8>)
 8002746:	441a      	add	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7ff f955 	bl	80019fe <vListInsertEnd>
 8002754:	e005      	b.n	8002762 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	3318      	adds	r3, #24
 800275a:	4619      	mov	r1, r3
 800275c:	480e      	ldr	r0, [pc, #56]	@ (8002798 <xTaskRemoveFromEventList+0xbc>)
 800275e:	f7ff f94e 	bl	80019fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002766:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <xTaskRemoveFromEventList+0xc0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276c:	429a      	cmp	r2, r3
 800276e:	d905      	bls.n	800277c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002770:	2301      	movs	r3, #1
 8002772:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002774:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <xTaskRemoveFromEventList+0xc4>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e001      	b.n	8002780 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002780:	697b      	ldr	r3, [r7, #20]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200004a4 	.word	0x200004a4
 8002790:	20000484 	.word	0x20000484
 8002794:	20000380 	.word	0x20000380
 8002798:	2000043c 	.word	0x2000043c
 800279c:	2000037c 	.word	0x2000037c
 80027a0:	20000490 	.word	0x20000490

080027a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80027ac:	f000 f852 	bl	8002854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <prvIdleTask+0x28>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d9f9      	bls.n	80027ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <prvIdleTask+0x2c>)
 80027ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80027c8:	e7f0      	b.n	80027ac <prvIdleTask+0x8>
 80027ca:	bf00      	nop
 80027cc:	20000380 	.word	0x20000380
 80027d0:	e000ed04 	.word	0xe000ed04

080027d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	e00c      	b.n	80027fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4a12      	ldr	r2, [pc, #72]	@ (8002834 <prvInitialiseTaskLists+0x60>)
 80027ec:	4413      	add	r3, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f8da 	bl	80019a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3301      	adds	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d9ef      	bls.n	80027e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002800:	480d      	ldr	r0, [pc, #52]	@ (8002838 <prvInitialiseTaskLists+0x64>)
 8002802:	f7ff f8d1 	bl	80019a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002806:	480d      	ldr	r0, [pc, #52]	@ (800283c <prvInitialiseTaskLists+0x68>)
 8002808:	f7ff f8ce 	bl	80019a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800280c:	480c      	ldr	r0, [pc, #48]	@ (8002840 <prvInitialiseTaskLists+0x6c>)
 800280e:	f7ff f8cb 	bl	80019a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002812:	480c      	ldr	r0, [pc, #48]	@ (8002844 <prvInitialiseTaskLists+0x70>)
 8002814:	f7ff f8c8 	bl	80019a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002818:	480b      	ldr	r0, [pc, #44]	@ (8002848 <prvInitialiseTaskLists+0x74>)
 800281a:	f7ff f8c5 	bl	80019a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <prvInitialiseTaskLists+0x78>)
 8002820:	4a05      	ldr	r2, [pc, #20]	@ (8002838 <prvInitialiseTaskLists+0x64>)
 8002822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002824:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <prvInitialiseTaskLists+0x7c>)
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <prvInitialiseTaskLists+0x68>)
 8002828:	601a      	str	r2, [r3, #0]
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000380 	.word	0x20000380
 8002838:	2000040c 	.word	0x2000040c
 800283c:	20000420 	.word	0x20000420
 8002840:	2000043c 	.word	0x2000043c
 8002844:	20000450 	.word	0x20000450
 8002848:	20000468 	.word	0x20000468
 800284c:	20000434 	.word	0x20000434
 8002850:	20000438 	.word	0x20000438

08002854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800285a:	e019      	b.n	8002890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800285c:	f000 f9d6 	bl	8002c0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002860:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <prvCheckTasksWaitingTermination+0x50>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff f921 	bl	8001ab4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <prvCheckTasksWaitingTermination+0x54>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3b01      	subs	r3, #1
 8002878:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <prvCheckTasksWaitingTermination+0x54>)
 800287a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <prvCheckTasksWaitingTermination+0x58>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3b01      	subs	r3, #1
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <prvCheckTasksWaitingTermination+0x58>)
 8002884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002886:	f000 f9f1 	bl	8002c6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f810 	bl	80028b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <prvCheckTasksWaitingTermination+0x58>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e1      	bne.n	800285c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000450 	.word	0x20000450
 80028a8:	2000047c 	.word	0x2000047c
 80028ac:	20000464 	.word	0x20000464

080028b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	334c      	adds	r3, #76	@ 0x4c
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fc4d 	bl	800315c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d108      	bne.n	80028de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fb25 	bl	8002f20 <vPortFree>
				vPortFree( pxTCB );
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fb22 	bl	8002f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80028dc:	e019      	b.n	8002912 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d103      	bne.n	80028f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fb19 	bl	8002f20 <vPortFree>
	}
 80028ee:	e010      	b.n	8002912 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d00b      	beq.n	8002912 <prvDeleteTCB+0x62>
	__asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	60fb      	str	r3, [r7, #12]
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	e7fd      	b.n	800290e <prvDeleteTCB+0x5e>
	}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002922:	4b0e      	ldr	r3, [pc, #56]	@ (800295c <prvResetNextTaskUnblockTime+0x40>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <prvResetNextTaskUnblockTime+0x14>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <prvResetNextTaskUnblockTime+0x16>
 8002930:	2300      	movs	r3, #0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002936:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <prvResetNextTaskUnblockTime+0x44>)
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800293e:	e008      	b.n	8002952 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <prvResetNextTaskUnblockTime+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <prvResetNextTaskUnblockTime+0x44>)
 8002950:	6013      	str	r3, [r2, #0]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	20000434 	.word	0x20000434
 8002960:	2000049c 	.word	0x2000049c

08002964 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800296e:	4b29      	ldr	r3, [pc, #164]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002974:	4b28      	ldr	r3, [pc, #160]	@ (8002a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3304      	adds	r3, #4
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f89a 	bl	8001ab4 <uxListRemove>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002986:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	2201      	movs	r2, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	4b21      	ldr	r3, [pc, #132]	@ (8002a1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4013      	ands	r3, r2
 800299a:	4a20      	ldr	r2, [pc, #128]	@ (8002a1c <prvAddCurrentTaskToDelayedList+0xb8>)
 800299c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d10a      	bne.n	80029bc <prvAddCurrentTaskToDelayedList+0x58>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3304      	adds	r3, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	481a      	ldr	r0, [pc, #104]	@ (8002a20 <prvAddCurrentTaskToDelayedList+0xbc>)
 80029b6:	f7ff f822 	bl	80019fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80029ba:	e026      	b.n	8002a0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029c4:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d209      	bcs.n	80029e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <prvAddCurrentTaskToDelayedList+0xc0>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3304      	adds	r3, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f7ff f82f 	bl	8001a44 <vListInsert>
}
 80029e6:	e010      	b.n	8002a0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <prvAddCurrentTaskToDelayedList+0xc4>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f7ff f825 	bl	8001a44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80029fa:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <prvAddCurrentTaskToDelayedList+0xc8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d202      	bcs.n	8002a0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002a04:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	6013      	str	r3, [r2, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000480 	.word	0x20000480
 8002a18:	2000037c 	.word	0x2000037c
 8002a1c:	20000484 	.word	0x20000484
 8002a20:	20000468 	.word	0x20000468
 8002a24:	20000438 	.word	0x20000438
 8002a28:	20000434 	.word	0x20000434
 8002a2c:	2000049c 	.word	0x2000049c

08002a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3b04      	subs	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b04      	subs	r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a60:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <pxPortInitialiseStack+0x54>)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3b14      	subs	r3, #20
 8002a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3b20      	subs	r3, #32
 8002a76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a78:	68fb      	ldr	r3, [r7, #12]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	08002a89 	.word	0x08002a89

08002a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <prvTaskExitError+0x54>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d00b      	beq.n	8002ab4 <prvTaskExitError+0x2c>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	60fb      	str	r3, [r7, #12]
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <prvTaskExitError+0x28>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	60bb      	str	r3, [r7, #8]
}
 8002ac6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ac8:	bf00      	nop
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0fc      	beq.n	8002aca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ae0:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <pxCurrentTCBConst2>)
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	6808      	ldr	r0, [r1, #0]
 8002ae6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002aea:	f380 8809 	msr	PSP, r0
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8811 	msr	BASEPRI, r0
 8002afa:	f04e 0e0d 	orr.w	lr, lr, #13
 8002afe:	4770      	bx	lr

08002b00 <pxCurrentTCBConst2>:
 8002b00:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop

08002b08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b08:	4806      	ldr	r0, [pc, #24]	@ (8002b24 <prvPortStartFirstTask+0x1c>)
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	6800      	ldr	r0, [r0, #0]
 8002b0e:	f380 8808 	msr	MSP, r0
 8002b12:	b662      	cpsie	i
 8002b14:	b661      	cpsie	f
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	df00      	svc	0
 8002b20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b22:	bf00      	nop
 8002b24:	e000ed08 	.word	0xe000ed08

08002b28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b2e:	4b32      	ldr	r3, [pc, #200]	@ (8002bf8 <xPortStartScheduler+0xd0>)
 8002b30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <xPortStartScheduler+0xd4>)
 8002b54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b56:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b5c:	e009      	b.n	8002b72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002b5e:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002b66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7a:	2b80      	cmp	r3, #128	@ 0x80
 8002b7c:	d0ef      	beq.n	8002b5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b7e:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00b      	beq.n	8002ba2 <xPortStartScheduler+0x7a>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	60bb      	str	r3, [r7, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	e7fd      	b.n	8002b9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	4a15      	ldr	r2, [pc, #84]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002baa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bb4:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002bb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <xPortStartScheduler+0xdc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8002c04 <xPortStartScheduler+0xdc>)
 8002bc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <xPortStartScheduler+0xdc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002c04 <xPortStartScheduler+0xdc>)
 8002bd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002bd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002bd8:	f000 f8b8 	bl	8002d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <xPortStartScheduler+0xe0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002be2:	f7ff ff91 	bl	8002b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002be6:	f7ff fd17 	bl	8002618 <vTaskSwitchContext>
	prvTaskExitError();
 8002bea:	f7ff ff4d 	bl	8002a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	e000e400 	.word	0xe000e400
 8002bfc:	200004a8 	.word	0x200004a8
 8002c00:	200004ac 	.word	0x200004ac
 8002c04:	e000ed20 	.word	0xe000ed20
 8002c08:	2000000c 	.word	0x2000000c

08002c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	607b      	str	r3, [r7, #4]
}
 8002c24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c26:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <vPortEnterCritical+0x58>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c64 <vPortEnterCritical+0x58>)
 8002c2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <vPortEnterCritical+0x58>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d110      	bne.n	8002c5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <vPortEnterCritical+0x5c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <vPortEnterCritical+0x4e>
	__asm volatile
 8002c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	603b      	str	r3, [r7, #0]
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	e7fd      	b.n	8002c56 <vPortEnterCritical+0x4a>
	}
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	2000000c 	.word	0x2000000c
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002c72:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <vPortExitCritical+0x50>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <vPortExitCritical+0x26>
	__asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	607b      	str	r3, [r7, #4]
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	e7fd      	b.n	8002c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <vPortExitCritical+0x50>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	4a08      	ldr	r2, [pc, #32]	@ (8002cbc <vPortExitCritical+0x50>)
 8002c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <vPortExitCritical+0x50>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <vPortExitCritical+0x44>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	2000000c 	.word	0x2000000c

08002cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002cc0:	f3ef 8009 	mrs	r0, PSP
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <pxCurrentTCBConst>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002cd0:	6010      	str	r0, [r2, #0]
 8002cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002cd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002cda:	f380 8811 	msr	BASEPRI, r0
 8002cde:	f7ff fc9b 	bl	8002618 <vTaskSwitchContext>
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8811 	msr	BASEPRI, r0
 8002cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	6808      	ldr	r0, [r1, #0]
 8002cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002cf6:	f380 8809 	msr	PSP, r0
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	4770      	bx	lr

08002d00 <pxCurrentTCBConst>:
 8002d00:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop

08002d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	607b      	str	r3, [r7, #4]
}
 8002d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d22:	f7ff fbbb 	bl	800249c <xTaskIncrementTick>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <SysTick_Handler+0x40>)
 8002d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	2300      	movs	r3, #0
 8002d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f383 8811 	msr	BASEPRI, r3
}
 8002d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d50:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <vPortSetupTimerInterrupt+0x30>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <vPortSetupTimerInterrupt+0x34>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <vPortSetupTimerInterrupt+0x38>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <vPortSetupTimerInterrupt+0x3c>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	4a08      	ldr	r2, [pc, #32]	@ (8002d8c <vPortSetupTimerInterrupt+0x40>)
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d6e:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <vPortSetupTimerInterrupt+0x30>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e010 	.word	0xe000e010
 8002d80:	e000e018 	.word	0xe000e018
 8002d84:	20000000 	.word	0x20000000
 8002d88:	10624dd3 	.word	0x10624dd3
 8002d8c:	e000e014 	.word	0xe000e014

08002d90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	@ 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d9c:	f7ff fad2 	bl	8002344 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002da0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f0c <pvPortMalloc+0x17c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002da8:	f000 f916 	bl	8002fd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002dac:	4b58      	ldr	r3, [pc, #352]	@ (8002f10 <pvPortMalloc+0x180>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 8090 	bne.w	8002eda <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01e      	beq.n	8002dfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f023 0307 	bic.w	r3, r3, #7
 8002dd8:	3308      	adds	r3, #8
 8002dda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <pvPortMalloc+0x6e>
	__asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	617b      	str	r3, [r7, #20]
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	e7fd      	b.n	8002dfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d06a      	beq.n	8002eda <pvPortMalloc+0x14a>
 8002e04:	4b43      	ldr	r3, [pc, #268]	@ (8002f14 <pvPortMalloc+0x184>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d865      	bhi.n	8002eda <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e0e:	4b42      	ldr	r3, [pc, #264]	@ (8002f18 <pvPortMalloc+0x188>)
 8002e10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e12:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <pvPortMalloc+0x188>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e18:	e004      	b.n	8002e24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d903      	bls.n	8002e36 <pvPortMalloc+0xa6>
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f1      	bne.n	8002e1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e36:	4b35      	ldr	r3, [pc, #212]	@ (8002f0c <pvPortMalloc+0x17c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d04c      	beq.n	8002eda <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2208      	movs	r2, #8
 8002e46:	4413      	add	r3, r2
 8002e48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	1ad2      	subs	r2, r2, r3
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d920      	bls.n	8002ea4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <pvPortMalloc+0xfc>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	613b      	str	r3, [r7, #16]
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1ad2      	subs	r2, r2, r3
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e9e:	69b8      	ldr	r0, [r7, #24]
 8002ea0:	f000 f8fc 	bl	800309c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <pvPortMalloc+0x184>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	4a19      	ldr	r2, [pc, #100]	@ (8002f14 <pvPortMalloc+0x184>)
 8002eb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002eb2:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <pvPortMalloc+0x184>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b19      	ldr	r3, [pc, #100]	@ (8002f1c <pvPortMalloc+0x18c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d203      	bcs.n	8002ec6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <pvPortMalloc+0x184>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <pvPortMalloc+0x18c>)
 8002ec4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <pvPortMalloc+0x180>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002eda:	f7ff fa41 	bl	8002360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <pvPortMalloc+0x170>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	60fb      	str	r3, [r7, #12]
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <pvPortMalloc+0x16c>
	return pvReturn;
 8002f00:	69fb      	ldr	r3, [r7, #28]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3728      	adds	r7, #40	@ 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200010b8 	.word	0x200010b8
 8002f10:	200010c4 	.word	0x200010c4
 8002f14:	200010bc 	.word	0x200010bc
 8002f18:	200010b0 	.word	0x200010b0
 8002f1c:	200010c0 	.word	0x200010c0

08002f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04a      	beq.n	8002fc8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f32:	2308      	movs	r3, #8
 8002f34:	425b      	negs	r3, r3
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4413      	add	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4b22      	ldr	r3, [pc, #136]	@ (8002fd0 <vPortFree+0xb0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10b      	bne.n	8002f66 <vPortFree+0x46>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	60fb      	str	r3, [r7, #12]
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	e7fd      	b.n	8002f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <vPortFree+0x66>
	__asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	60bb      	str	r3, [r7, #8]
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	e7fd      	b.n	8002f82 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <vPortFree+0xb0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d019      	beq.n	8002fc8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d115      	bne.n	8002fc8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <vPortFree+0xb0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002fac:	f7ff f9ca 	bl	8002344 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <vPortFree+0xb4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4413      	add	r3, r2
 8002fba:	4a06      	ldr	r2, [pc, #24]	@ (8002fd4 <vPortFree+0xb4>)
 8002fbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002fbe:	6938      	ldr	r0, [r7, #16]
 8002fc0:	f000 f86c 	bl	800309c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002fc4:	f7ff f9cc 	bl	8002360 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200010c4 	.word	0x200010c4
 8002fd4:	200010bc 	.word	0x200010bc

08002fd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fde:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fe2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fe4:	4b27      	ldr	r3, [pc, #156]	@ (8003084 <prvHeapInit+0xac>)
 8002fe6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3307      	adds	r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0307 	bic.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	4a1f      	ldr	r2, [pc, #124]	@ (8003084 <prvHeapInit+0xac>)
 8003008:	4413      	add	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003010:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <prvHeapInit+0xb0>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003016:	4b1c      	ldr	r3, [pc, #112]	@ (8003088 <prvHeapInit+0xb0>)
 8003018:	2200      	movs	r2, #0
 800301a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	4413      	add	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003024:	2208      	movs	r2, #8
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0307 	bic.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a15      	ldr	r2, [pc, #84]	@ (800308c <prvHeapInit+0xb4>)
 8003038:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800303a:	4b14      	ldr	r3, [pc, #80]	@ (800308c <prvHeapInit+0xb4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2200      	movs	r2, #0
 8003040:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <prvHeapInit+0xb4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	1ad2      	subs	r2, r2, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003058:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <prvHeapInit+0xb4>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a0a      	ldr	r2, [pc, #40]	@ (8003090 <prvHeapInit+0xb8>)
 8003066:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <prvHeapInit+0xbc>)
 800306e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <prvHeapInit+0xc0>)
 8003072:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003076:	601a      	str	r2, [r3, #0]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	200004b0 	.word	0x200004b0
 8003088:	200010b0 	.word	0x200010b0
 800308c:	200010b8 	.word	0x200010b8
 8003090:	200010c0 	.word	0x200010c0
 8003094:	200010bc 	.word	0x200010bc
 8003098:	200010c4 	.word	0x200010c4

0800309c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030a4:	4b27      	ldr	r3, [pc, #156]	@ (8003144 <prvInsertBlockIntoFreeList+0xa8>)
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e002      	b.n	80030b0 <prvInsertBlockIntoFreeList+0x14>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d8f7      	bhi.n	80030aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4413      	add	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d108      	bne.n	80030de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	441a      	add	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	441a      	add	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d118      	bne.n	8003124 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <prvInsertBlockIntoFreeList+0xac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d00d      	beq.n	800311a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e008      	b.n	800312c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800311a:	4b0b      	ldr	r3, [pc, #44]	@ (8003148 <prvInsertBlockIntoFreeList+0xac>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e003      	b.n	800312c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d002      	beq.n	800313a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	200010b0 	.word	0x200010b0
 8003148:	200010b8 	.word	0x200010b8

0800314c <memset>:
 800314c:	4603      	mov	r3, r0
 800314e:	4402      	add	r2, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <_reclaim_reent>:
 800315c:	4b29      	ldr	r3, [pc, #164]	@ (8003204 <_reclaim_reent+0xa8>)
 800315e:	b570      	push	{r4, r5, r6, lr}
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4604      	mov	r4, r0
 8003164:	4283      	cmp	r3, r0
 8003166:	d04b      	beq.n	8003200 <_reclaim_reent+0xa4>
 8003168:	69c3      	ldr	r3, [r0, #28]
 800316a:	b1ab      	cbz	r3, 8003198 <_reclaim_reent+0x3c>
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	b16b      	cbz	r3, 800318c <_reclaim_reent+0x30>
 8003170:	2500      	movs	r5, #0
 8003172:	69e3      	ldr	r3, [r4, #28]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	5959      	ldr	r1, [r3, r5]
 8003178:	2900      	cmp	r1, #0
 800317a:	d13b      	bne.n	80031f4 <_reclaim_reent+0x98>
 800317c:	3504      	adds	r5, #4
 800317e:	2d80      	cmp	r5, #128	@ 0x80
 8003180:	d1f7      	bne.n	8003172 <_reclaim_reent+0x16>
 8003182:	69e3      	ldr	r3, [r4, #28]
 8003184:	4620      	mov	r0, r4
 8003186:	68d9      	ldr	r1, [r3, #12]
 8003188:	f000 f864 	bl	8003254 <_free_r>
 800318c:	69e3      	ldr	r3, [r4, #28]
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	b111      	cbz	r1, 8003198 <_reclaim_reent+0x3c>
 8003192:	4620      	mov	r0, r4
 8003194:	f000 f85e 	bl	8003254 <_free_r>
 8003198:	6961      	ldr	r1, [r4, #20]
 800319a:	b111      	cbz	r1, 80031a2 <_reclaim_reent+0x46>
 800319c:	4620      	mov	r0, r4
 800319e:	f000 f859 	bl	8003254 <_free_r>
 80031a2:	69e1      	ldr	r1, [r4, #28]
 80031a4:	b111      	cbz	r1, 80031ac <_reclaim_reent+0x50>
 80031a6:	4620      	mov	r0, r4
 80031a8:	f000 f854 	bl	8003254 <_free_r>
 80031ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80031ae:	b111      	cbz	r1, 80031b6 <_reclaim_reent+0x5a>
 80031b0:	4620      	mov	r0, r4
 80031b2:	f000 f84f 	bl	8003254 <_free_r>
 80031b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031b8:	b111      	cbz	r1, 80031c0 <_reclaim_reent+0x64>
 80031ba:	4620      	mov	r0, r4
 80031bc:	f000 f84a 	bl	8003254 <_free_r>
 80031c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80031c2:	b111      	cbz	r1, 80031ca <_reclaim_reent+0x6e>
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 f845 	bl	8003254 <_free_r>
 80031ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80031cc:	b111      	cbz	r1, 80031d4 <_reclaim_reent+0x78>
 80031ce:	4620      	mov	r0, r4
 80031d0:	f000 f840 	bl	8003254 <_free_r>
 80031d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80031d6:	b111      	cbz	r1, 80031de <_reclaim_reent+0x82>
 80031d8:	4620      	mov	r0, r4
 80031da:	f000 f83b 	bl	8003254 <_free_r>
 80031de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80031e0:	b111      	cbz	r1, 80031e8 <_reclaim_reent+0x8c>
 80031e2:	4620      	mov	r0, r4
 80031e4:	f000 f836 	bl	8003254 <_free_r>
 80031e8:	6a23      	ldr	r3, [r4, #32]
 80031ea:	b14b      	cbz	r3, 8003200 <_reclaim_reent+0xa4>
 80031ec:	4620      	mov	r0, r4
 80031ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031f2:	4718      	bx	r3
 80031f4:	680e      	ldr	r6, [r1, #0]
 80031f6:	4620      	mov	r0, r4
 80031f8:	f000 f82c 	bl	8003254 <_free_r>
 80031fc:	4631      	mov	r1, r6
 80031fe:	e7bb      	b.n	8003178 <_reclaim_reent+0x1c>
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	bf00      	nop
 8003204:	20000010 	.word	0x20000010

08003208 <__libc_init_array>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	2600      	movs	r6, #0
 800320c:	4d0c      	ldr	r5, [pc, #48]	@ (8003240 <__libc_init_array+0x38>)
 800320e:	4c0d      	ldr	r4, [pc, #52]	@ (8003244 <__libc_init_array+0x3c>)
 8003210:	1b64      	subs	r4, r4, r5
 8003212:	10a4      	asrs	r4, r4, #2
 8003214:	42a6      	cmp	r6, r4
 8003216:	d109      	bne.n	800322c <__libc_init_array+0x24>
 8003218:	f000 f870 	bl	80032fc <_init>
 800321c:	2600      	movs	r6, #0
 800321e:	4d0a      	ldr	r5, [pc, #40]	@ (8003248 <__libc_init_array+0x40>)
 8003220:	4c0a      	ldr	r4, [pc, #40]	@ (800324c <__libc_init_array+0x44>)
 8003222:	1b64      	subs	r4, r4, r5
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	42a6      	cmp	r6, r4
 8003228:	d105      	bne.n	8003236 <__libc_init_array+0x2e>
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003230:	4798      	blx	r3
 8003232:	3601      	adds	r6, #1
 8003234:	e7ee      	b.n	8003214 <__libc_init_array+0xc>
 8003236:	f855 3b04 	ldr.w	r3, [r5], #4
 800323a:	4798      	blx	r3
 800323c:	3601      	adds	r6, #1
 800323e:	e7f2      	b.n	8003226 <__libc_init_array+0x1e>
 8003240:	080033d0 	.word	0x080033d0
 8003244:	080033d0 	.word	0x080033d0
 8003248:	080033d0 	.word	0x080033d0
 800324c:	080033d4 	.word	0x080033d4

08003250 <__retarget_lock_acquire_recursive>:
 8003250:	4770      	bx	lr

08003252 <__retarget_lock_release_recursive>:
 8003252:	4770      	bx	lr

08003254 <_free_r>:
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4605      	mov	r5, r0
 8003258:	2900      	cmp	r1, #0
 800325a:	d040      	beq.n	80032de <_free_r+0x8a>
 800325c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003260:	1f0c      	subs	r4, r1, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	bfb8      	it	lt
 8003266:	18e4      	addlt	r4, r4, r3
 8003268:	f000 f83c 	bl	80032e4 <__malloc_lock>
 800326c:	4a1c      	ldr	r2, [pc, #112]	@ (80032e0 <_free_r+0x8c>)
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	b933      	cbnz	r3, 8003280 <_free_r+0x2c>
 8003272:	6063      	str	r3, [r4, #4]
 8003274:	6014      	str	r4, [r2, #0]
 8003276:	4628      	mov	r0, r5
 8003278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800327c:	f000 b838 	b.w	80032f0 <__malloc_unlock>
 8003280:	42a3      	cmp	r3, r4
 8003282:	d908      	bls.n	8003296 <_free_r+0x42>
 8003284:	6820      	ldr	r0, [r4, #0]
 8003286:	1821      	adds	r1, r4, r0
 8003288:	428b      	cmp	r3, r1
 800328a:	bf01      	itttt	eq
 800328c:	6819      	ldreq	r1, [r3, #0]
 800328e:	685b      	ldreq	r3, [r3, #4]
 8003290:	1809      	addeq	r1, r1, r0
 8003292:	6021      	streq	r1, [r4, #0]
 8003294:	e7ed      	b.n	8003272 <_free_r+0x1e>
 8003296:	461a      	mov	r2, r3
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	b10b      	cbz	r3, 80032a0 <_free_r+0x4c>
 800329c:	42a3      	cmp	r3, r4
 800329e:	d9fa      	bls.n	8003296 <_free_r+0x42>
 80032a0:	6811      	ldr	r1, [r2, #0]
 80032a2:	1850      	adds	r0, r2, r1
 80032a4:	42a0      	cmp	r0, r4
 80032a6:	d10b      	bne.n	80032c0 <_free_r+0x6c>
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	4401      	add	r1, r0
 80032ac:	1850      	adds	r0, r2, r1
 80032ae:	4283      	cmp	r3, r0
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	d1e0      	bne.n	8003276 <_free_r+0x22>
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4408      	add	r0, r1
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	6053      	str	r3, [r2, #4]
 80032be:	e7da      	b.n	8003276 <_free_r+0x22>
 80032c0:	d902      	bls.n	80032c8 <_free_r+0x74>
 80032c2:	230c      	movs	r3, #12
 80032c4:	602b      	str	r3, [r5, #0]
 80032c6:	e7d6      	b.n	8003276 <_free_r+0x22>
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	1821      	adds	r1, r4, r0
 80032cc:	428b      	cmp	r3, r1
 80032ce:	bf01      	itttt	eq
 80032d0:	6819      	ldreq	r1, [r3, #0]
 80032d2:	685b      	ldreq	r3, [r3, #4]
 80032d4:	1809      	addeq	r1, r1, r0
 80032d6:	6021      	streq	r1, [r4, #0]
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6054      	str	r4, [r2, #4]
 80032dc:	e7cb      	b.n	8003276 <_free_r+0x22>
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	20001204 	.word	0x20001204

080032e4 <__malloc_lock>:
 80032e4:	4801      	ldr	r0, [pc, #4]	@ (80032ec <__malloc_lock+0x8>)
 80032e6:	f7ff bfb3 	b.w	8003250 <__retarget_lock_acquire_recursive>
 80032ea:	bf00      	nop
 80032ec:	20001200 	.word	0x20001200

080032f0 <__malloc_unlock>:
 80032f0:	4801      	ldr	r0, [pc, #4]	@ (80032f8 <__malloc_unlock+0x8>)
 80032f2:	f7ff bfae 	b.w	8003252 <__retarget_lock_release_recursive>
 80032f6:	bf00      	nop
 80032f8:	20001200 	.word	0x20001200

080032fc <_init>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	bf00      	nop
 8003300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003302:	bc08      	pop	{r3}
 8003304:	469e      	mov	lr, r3
 8003306:	4770      	bx	lr

08003308 <_fini>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr
